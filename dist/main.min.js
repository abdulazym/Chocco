"use strict";function _typeof(e){return(_typeof="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(e){return typeof e}:function(e){return e&&"function"==typeof Symbol&&e.constructor===Symbol&&e!==Symbol.prototype?"symbol":typeof e})(e)}!function(e,t){"object"===("undefined"==typeof module?"undefined":_typeof(module))&&"object"===_typeof(module.exports)?module.exports=e.document?t(e,!0):function(e){if(!e.document)throw new Error("jQuery requires a window with a document");return t(e)}:t(e)}("undefined"!=typeof window?window:void 0,function(C,e){function g(e){return null!=e&&e===e.window}var t=[],i=Object.getPrototypeOf,a=t.slice,v=t.flat?function(e){return t.flat.call(e)}:function(e){return t.concat.apply([],e)},l=t.push,r=t.indexOf,n={},o=n.toString,m=n.hasOwnProperty,s=m.toString,c=s.call(Object),y={},x=function(e){return"function"==typeof e&&"number"!=typeof e.nodeType},T=C.document,u={type:!0,src:!0,nonce:!0,noModule:!0};function b(e,t,n){var i,r,o=(n=n||T).createElement("script");if(o.text=e,t)for(i in u)(r=t[i]||t.getAttribute&&t.getAttribute(i))&&o.setAttribute(i,r);n.head.appendChild(o).parentNode.removeChild(o)}function w(e){return null==e?e+"":"object"===_typeof(e)||"function"==typeof e?n[o.call(e)]||"object":_typeof(e)}var d="3.5.1",k=function e(t,n){return new e.fn.init(t,n)};function p(e){var t=!!e&&"length"in e&&e.length,n=w(e);return!x(e)&&!g(e)&&("array"===n||0===t||"number"==typeof t&&0<t&&t-1 in e)}k.fn=k.prototype={jquery:d,constructor:k,length:0,toArray:function(){return a.call(this)},get:function(e){return null==e?a.call(this):e<0?this[e+this.length]:this[e]},pushStack:function(e){var t=k.merge(this.constructor(),e);return t.prevObject=this,t},each:function(e){return k.each(this,e)},map:function(n){return this.pushStack(k.map(this,function(e,t){return n.call(e,t,e)}))},slice:function(){return this.pushStack(a.apply(this,arguments))},first:function(){return this.eq(0)},last:function(){return this.eq(-1)},even:function(){return this.pushStack(k.grep(this,function(e,t){return(t+1)%2}))},odd:function(){return this.pushStack(k.grep(this,function(e,t){return t%2}))},eq:function(e){var t=this.length,n=+e+(e<0?t:0);return this.pushStack(0<=n&&n<t?[this[n]]:[])},end:function(){return this.prevObject||this.constructor()},push:l,sort:t.sort,splice:t.splice},k.extend=k.fn.extend=function(){var e,t,n,i,r,o,s=arguments[0]||{},a=1,l=arguments.length,c=!1;for("boolean"==typeof s&&(c=s,s=arguments[a]||{},a++),"object"===_typeof(s)||x(s)||(s={}),a===l&&(s=this,a--);a<l;a++)if(null!=(e=arguments[a]))for(t in e)i=e[t],"__proto__"!==t&&s!==i&&(c&&i&&(k.isPlainObject(i)||(r=Array.isArray(i)))?(n=s[t],o=r&&!Array.isArray(n)?[]:r||k.isPlainObject(n)?n:{},r=!1,s[t]=k.extend(c,o,i)):void 0!==i&&(s[t]=i));return s},k.extend({expando:"jQuery"+(d+Math.random()).replace(/\D/g,""),isReady:!0,error:function(e){throw new Error(e)},noop:function(){},isPlainObject:function(e){var t,n;return!(!e||"[object Object]"!==o.call(e))&&(!(t=i(e))||"function"==typeof(n=m.call(t,"constructor")&&t.constructor)&&s.call(n)===c)},isEmptyObject:function(e){var t;for(t in e)return!1;return!0},globalEval:function(e,t,n){b(e,{nonce:t&&t.nonce},n)},each:function(e,t){var n,i=0;if(p(e))for(n=e.length;i<n&&!1!==t.call(e[i],i,e[i]);i++);else for(i in e)if(!1===t.call(e[i],i,e[i]))break;return e},makeArray:function(e,t){var n=t||[];return null!=e&&(p(Object(e))?k.merge(n,"string"==typeof e?[e]:e):l.call(n,e)),n},inArray:function(e,t,n){return null==t?-1:r.call(t,e,n)},merge:function(e,t){for(var n=+t.length,i=0,r=e.length;i<n;i++)e[r++]=t[i];return e.length=r,e},grep:function(e,t,n){for(var i=[],r=0,o=e.length,s=!n;r<o;r++)!t(e[r],r)!=s&&i.push(e[r]);return i},map:function(e,t,n){var i,r,o=0,s=[];if(p(e))for(i=e.length;o<i;o++)null!=(r=t(e[o],o,n))&&s.push(r);else for(o in e)null!=(r=t(e[o],o,n))&&s.push(r);return v(s)},guid:1,support:y}),"function"==typeof Symbol&&(k.fn[Symbol.iterator]=t[Symbol.iterator]),k.each("Boolean Number String Function Array Date RegExp Object Error Symbol".split(" "),function(e,t){n["[object "+t+"]"]=t.toLowerCase()});var f=function(n){function d(e,t){var n="0x"+e.slice(1)-65536;return t||(n<0?String.fromCharCode(65536+n):String.fromCharCode(n>>10|55296,1023&n|56320))}function r(){S()}var e,f,b,o,s,h,p,g,w,l,c,S,C,a,T,v,u,m,y,k="sizzle"+ +new Date,x=n.document,E=0,i=0,A=le(),D=le(),N=le(),L=le(),q=function(e,t){return e===t&&(c=!0),0},j={}.hasOwnProperty,t=[],P=t.pop,M=t.push,H=t.push,_=t.slice,I=function(e,t){for(var n=0,i=e.length;n<i;n++)if(e[n]===t)return n;return-1},O="checked|selected|async|autofocus|autoplay|controls|defer|disabled|hidden|ismap|loop|multiple|open|readonly|required|scoped",R="[\\x20\\t\\r\\n\\f]",$="(?:\\\\[\\da-fA-F]{1,6}"+R+"?|\\\\[^\\r\\n\\f]|[\\w-]|[^\0-\\x7f])+",W="\\["+R+"*("+$+")(?:"+R+"*([*^$|!~]?=)"+R+"*(?:'((?:\\\\.|[^\\\\'])*)'|\"((?:\\\\.|[^\\\\\"])*)\"|("+$+"))|)"+R+"*\\]",z=":("+$+")(?:\\((('((?:\\\\.|[^\\\\'])*)'|\"((?:\\\\.|[^\\\\\"])*)\")|((?:\\\\.|[^\\\\()[\\]]|"+W+")*)|.*)\\)|)",F=new RegExp(R+"+","g"),B=new RegExp("^"+R+"+|((?:^|[^\\\\])(?:\\\\.)*)"+R+"+$","g"),X=new RegExp("^"+R+"*,"+R+"*"),U=new RegExp("^"+R+"*([>+~]|"+R+")"+R+"*"),V=new RegExp(R+"|>"),Y=new RegExp(z),G=new RegExp("^"+$+"$"),Q={ID:new RegExp("^#("+$+")"),CLASS:new RegExp("^\\.("+$+")"),TAG:new RegExp("^("+$+"|[*])"),ATTR:new RegExp("^"+W),PSEUDO:new RegExp("^"+z),CHILD:new RegExp("^:(only|first|last|nth|nth-last)-(child|of-type)(?:\\("+R+"*(even|odd|(([+-]|)(\\d*)n|)"+R+"*(?:([+-]|)"+R+"*(\\d+)|))"+R+"*\\)|)","i"),bool:new RegExp("^(?:"+O+")$","i"),needsContext:new RegExp("^"+R+"*[>+~]|:(even|odd|eq|gt|lt|nth|first|last)(?:\\("+R+"*((?:-\\d)?\\d*)"+R+"*\\)|)(?=[^-]|$)","i")},J=/HTML$/i,Z=/^(?:input|select|textarea|button)$/i,K=/^h\d$/i,ee=/^[^{]+\{\s*\[native \w/,te=/^(?:#([\w-]+)|(\w+)|\.([\w-]+))$/,ne=/[+~]/,ie=new RegExp("\\\\[\\da-fA-F]{1,6}"+R+"?|\\\\([^\\r\\n\\f])","g"),re=/([\0-\x1f\x7f]|^-?\d)|^-$|[^\0-\x1f\x7f-\uFFFF\w-]/g,oe=function(e,t){return t?"\0"===e?"ï¿½":e.slice(0,-1)+"\\"+e.charCodeAt(e.length-1).toString(16)+" ":"\\"+e},se=ye(function(e){return!0===e.disabled&&"fieldset"===e.nodeName.toLowerCase()},{dir:"parentNode",next:"legend"});try{H.apply(t=_.call(x.childNodes),x.childNodes),t[x.childNodes.length].nodeType}catch(e){H={apply:t.length?function(e,t){M.apply(e,_.call(t))}:function(e,t){for(var n=e.length,i=0;e[n++]=t[i++];);e.length=n-1}}}function ae(t,e,n,i){var r,o,s,a,l,c,u,d=e&&e.ownerDocument,p=e?e.nodeType:9;if(n=n||[],"string"!=typeof t||!t||1!==p&&9!==p&&11!==p)return n;if(!i&&(S(e),e=e||C,T)){if(11!==p&&(l=te.exec(t)))if(r=l[1]){if(9===p){if(!(s=e.getElementById(r)))return n;if(s.id===r)return n.push(s),n}else if(d&&(s=d.getElementById(r))&&y(e,s)&&s.id===r)return n.push(s),n}else{if(l[2])return H.apply(n,e.getElementsByTagName(t)),n;if((r=l[3])&&f.getElementsByClassName&&e.getElementsByClassName)return H.apply(n,e.getElementsByClassName(r)),n}if(f.qsa&&!L[t+" "]&&(!v||!v.test(t))&&(1!==p||"object"!==e.nodeName.toLowerCase())){if(u=t,d=e,1===p&&(V.test(t)||U.test(t))){for((d=ne.test(t)&&ge(e.parentNode)||e)===e&&f.scope||((a=e.getAttribute("id"))?a=a.replace(re,oe):e.setAttribute("id",a=k)),o=(c=h(t)).length;o--;)c[o]=(a?"#"+a:":scope")+" "+me(c[o]);u=c.join(",")}try{return H.apply(n,d.querySelectorAll(u)),n}catch(e){L(t,!0)}finally{a===k&&e.removeAttribute("id")}}}return g(t.replace(B,"$1"),e,n,i)}function le(){var n=[];function i(e,t){return n.push(e+" ")>b.cacheLength&&delete i[n.shift()],i[e+" "]=t}return i}function ce(e){return e[k]=!0,e}function ue(e){var t=C.createElement("fieldset");try{return!!e(t)}catch(e){return!1}finally{t.parentNode&&t.parentNode.removeChild(t),t=null}}function de(e,t){for(var n=e.split("|"),i=n.length;i--;)b.attrHandle[n[i]]=t}function pe(e,t){var n=t&&e,i=n&&1===e.nodeType&&1===t.nodeType&&e.sourceIndex-t.sourceIndex;if(i)return i;if(n)for(;n=n.nextSibling;)if(n===t)return-1;return e?1:-1}function fe(t){return function(e){return"form"in e?e.parentNode&&!1===e.disabled?"label"in e?"label"in e.parentNode?e.parentNode.disabled===t:e.disabled===t:e.isDisabled===t||e.isDisabled!==!t&&se(e)===t:e.disabled===t:"label"in e&&e.disabled===t}}function he(s){return ce(function(o){return o=+o,ce(function(e,t){for(var n,i=s([],e.length,o),r=i.length;r--;)e[n=i[r]]&&(e[n]=!(t[n]=e[n]))})})}function ge(e){return e&&void 0!==e.getElementsByTagName&&e}for(e in f=ae.support={},s=ae.isXML=function(e){var t=e.namespaceURI,n=(e.ownerDocument||e).documentElement;return!J.test(t||n&&n.nodeName||"HTML")},S=ae.setDocument=function(e){var t,n,i=e?e.ownerDocument||e:x;return i!=C&&9===i.nodeType&&i.documentElement&&(a=(C=i).documentElement,T=!s(C),x!=C&&(n=C.defaultView)&&n.top!==n&&(n.addEventListener?n.addEventListener("unload",r,!1):n.attachEvent&&n.attachEvent("onunload",r)),f.scope=ue(function(e){return a.appendChild(e).appendChild(C.createElement("div")),void 0!==e.querySelectorAll&&!e.querySelectorAll(":scope fieldset div").length}),f.attributes=ue(function(e){return e.className="i",!e.getAttribute("className")}),f.getElementsByTagName=ue(function(e){return e.appendChild(C.createComment("")),!e.getElementsByTagName("*").length}),f.getElementsByClassName=ee.test(C.getElementsByClassName),f.getById=ue(function(e){return a.appendChild(e).id=k,!C.getElementsByName||!C.getElementsByName(k).length}),f.getById?(b.filter.ID=function(e){var t=e.replace(ie,d);return function(e){return e.getAttribute("id")===t}},b.find.ID=function(e,t){if(void 0!==t.getElementById&&T){var n=t.getElementById(e);return n?[n]:[]}}):(b.filter.ID=function(e){var n=e.replace(ie,d);return function(e){var t=void 0!==e.getAttributeNode&&e.getAttributeNode("id");return t&&t.value===n}},b.find.ID=function(e,t){if(void 0!==t.getElementById&&T){var n,i,r,o=t.getElementById(e);if(o){if((n=o.getAttributeNode("id"))&&n.value===e)return[o];for(r=t.getElementsByName(e),i=0;o=r[i++];)if((n=o.getAttributeNode("id"))&&n.value===e)return[o]}return[]}}),b.find.TAG=f.getElementsByTagName?function(e,t){return void 0!==t.getElementsByTagName?t.getElementsByTagName(e):f.qsa?t.querySelectorAll(e):void 0}:function(e,t){var n,i=[],r=0,o=t.getElementsByTagName(e);if("*"!==e)return o;for(;n=o[r++];)1===n.nodeType&&i.push(n);return i},b.find.CLASS=f.getElementsByClassName&&function(e,t){if(void 0!==t.getElementsByClassName&&T)return t.getElementsByClassName(e)},u=[],v=[],(f.qsa=ee.test(C.querySelectorAll))&&(ue(function(e){var t;a.appendChild(e).innerHTML="<a id='"+k+"'></a><select id='"+k+"-\r\\' msallowcapture=''><option selected=''></option></select>",e.querySelectorAll("[msallowcapture^='']").length&&v.push("[*^$]="+R+"*(?:''|\"\")"),e.querySelectorAll("[selected]").length||v.push("\\["+R+"*(?:value|"+O+")"),e.querySelectorAll("[id~="+k+"-]").length||v.push("~="),(t=C.createElement("input")).setAttribute("name",""),e.appendChild(t),e.querySelectorAll("[name='']").length||v.push("\\["+R+"*name"+R+"*="+R+"*(?:''|\"\")"),e.querySelectorAll(":checked").length||v.push(":checked"),e.querySelectorAll("a#"+k+"+*").length||v.push(".#.+[+~]"),e.querySelectorAll("\\\f"),v.push("[\\r\\n\\f]")}),ue(function(e){e.innerHTML="<a href='' disabled='disabled'></a><select disabled='disabled'><option/></select>";var t=C.createElement("input");t.setAttribute("type","hidden"),e.appendChild(t).setAttribute("name","D"),e.querySelectorAll("[name=d]").length&&v.push("name"+R+"*[*^$|!~]?="),2!==e.querySelectorAll(":enabled").length&&v.push(":enabled",":disabled"),a.appendChild(e).disabled=!0,2!==e.querySelectorAll(":disabled").length&&v.push(":enabled",":disabled"),e.querySelectorAll("*,:x"),v.push(",.*:")})),(f.matchesSelector=ee.test(m=a.matches||a.webkitMatchesSelector||a.mozMatchesSelector||a.oMatchesSelector||a.msMatchesSelector))&&ue(function(e){f.disconnectedMatch=m.call(e,"*"),m.call(e,"[s!='']:x"),u.push("!=",z)}),v=v.length&&new RegExp(v.join("|")),u=u.length&&new RegExp(u.join("|")),t=ee.test(a.compareDocumentPosition),y=t||ee.test(a.contains)?function(e,t){var n=9===e.nodeType?e.documentElement:e,i=t&&t.parentNode;return e===i||!(!i||1!==i.nodeType||!(n.contains?n.contains(i):e.compareDocumentPosition&&16&e.compareDocumentPosition(i)))}:function(e,t){if(t)for(;t=t.parentNode;)if(t===e)return!0;return!1},q=t?function(e,t){if(e===t)return c=!0,0;var n=!e.compareDocumentPosition-!t.compareDocumentPosition;return n||(1&(n=(e.ownerDocument||e)==(t.ownerDocument||t)?e.compareDocumentPosition(t):1)||!f.sortDetached&&t.compareDocumentPosition(e)===n?e==C||e.ownerDocument==x&&y(x,e)?-1:t==C||t.ownerDocument==x&&y(x,t)?1:l?I(l,e)-I(l,t):0:4&n?-1:1)}:function(e,t){if(e===t)return c=!0,0;var n,i=0,r=e.parentNode,o=t.parentNode,s=[e],a=[t];if(!r||!o)return e==C?-1:t==C?1:r?-1:o?1:l?I(l,e)-I(l,t):0;if(r===o)return pe(e,t);for(n=e;n=n.parentNode;)s.unshift(n);for(n=t;n=n.parentNode;)a.unshift(n);for(;s[i]===a[i];)i++;return i?pe(s[i],a[i]):s[i]==x?-1:a[i]==x?1:0}),C},ae.matches=function(e,t){return ae(e,null,null,t)},ae.matchesSelector=function(e,t){if(S(e),f.matchesSelector&&T&&!L[t+" "]&&(!u||!u.test(t))&&(!v||!v.test(t)))try{var n=m.call(e,t);if(n||f.disconnectedMatch||e.document&&11!==e.document.nodeType)return n}catch(e){L(t,!0)}return 0<ae(t,C,null,[e]).length},ae.contains=function(e,t){return(e.ownerDocument||e)!=C&&S(e),y(e,t)},ae.attr=function(e,t){(e.ownerDocument||e)!=C&&S(e);var n=b.attrHandle[t.toLowerCase()],i=n&&j.call(b.attrHandle,t.toLowerCase())?n(e,t,!T):void 0;return void 0!==i?i:f.attributes||!T?e.getAttribute(t):(i=e.getAttributeNode(t))&&i.specified?i.value:null},ae.escape=function(e){return(e+"").replace(re,oe)},ae.error=function(e){throw new Error("Syntax error, unrecognized expression: "+e)},ae.uniqueSort=function(e){var t,n=[],i=0,r=0;if(c=!f.detectDuplicates,l=!f.sortStable&&e.slice(0),e.sort(q),c){for(;t=e[r++];)t===e[r]&&(i=n.push(r));for(;i--;)e.splice(n[i],1)}return l=null,e},o=ae.getText=function(e){var t,n="",i=0,r=e.nodeType;if(r){if(1===r||9===r||11===r){if("string"==typeof e.textContent)return e.textContent;for(e=e.firstChild;e;e=e.nextSibling)n+=o(e)}else if(3===r||4===r)return e.nodeValue}else for(;t=e[i++];)n+=o(t);return n},(b=ae.selectors={cacheLength:50,createPseudo:ce,match:Q,attrHandle:{},find:{},relative:{">":{dir:"parentNode",first:!0}," ":{dir:"parentNode"},"+":{dir:"previousSibling",first:!0},"~":{dir:"previousSibling"}},preFilter:{ATTR:function(e){return e[1]=e[1].replace(ie,d),e[3]=(e[3]||e[4]||e[5]||"").replace(ie,d),"~="===e[2]&&(e[3]=" "+e[3]+" "),e.slice(0,4)},CHILD:function(e){return e[1]=e[1].toLowerCase(),"nth"===e[1].slice(0,3)?(e[3]||ae.error(e[0]),e[4]=+(e[4]?e[5]+(e[6]||1):2*("even"===e[3]||"odd"===e[3])),e[5]=+(e[7]+e[8]||"odd"===e[3])):e[3]&&ae.error(e[0]),e},PSEUDO:function(e){var t,n=!e[6]&&e[2];return Q.CHILD.test(e[0])?null:(e[3]?e[2]=e[4]||e[5]||"":n&&Y.test(n)&&(t=h(n,!0))&&(t=n.indexOf(")",n.length-t)-n.length)&&(e[0]=e[0].slice(0,t),e[2]=n.slice(0,t)),e.slice(0,3))}},filter:{TAG:function(e){var t=e.replace(ie,d).toLowerCase();return"*"===e?function(){return!0}:function(e){return e.nodeName&&e.nodeName.toLowerCase()===t}},CLASS:function(e){var t=A[e+" "];return t||(t=new RegExp("(^|"+R+")"+e+"("+R+"|$)"))&&A(e,function(e){return t.test("string"==typeof e.className&&e.className||void 0!==e.getAttribute&&e.getAttribute("class")||"")})},ATTR:function(n,i,r){return function(e){var t=ae.attr(e,n);return null==t?"!="===i:!i||(t+="","="===i?t===r:"!="===i?t!==r:"^="===i?r&&0===t.indexOf(r):"*="===i?r&&-1<t.indexOf(r):"$="===i?r&&t.slice(-r.length)===r:"~="===i?-1<(" "+t.replace(F," ")+" ").indexOf(r):"|="===i&&(t===r||t.slice(0,r.length+1)===r+"-"))}},CHILD:function(h,e,t,g,v){var m="nth"!==h.slice(0,3),y="last"!==h.slice(-4),x="of-type"===e;return 1===g&&0===v?function(e){return!!e.parentNode}:function(e,t,n){var i,r,o,s,a,l,c=m!=y?"nextSibling":"previousSibling",u=e.parentNode,d=x&&e.nodeName.toLowerCase(),p=!n&&!x,f=!1;if(u){if(m){for(;c;){for(s=e;s=s[c];)if(x?s.nodeName.toLowerCase()===d:1===s.nodeType)return!1;l=c="only"===h&&!l&&"nextSibling"}return!0}if(l=[y?u.firstChild:u.lastChild],y&&p){for(f=(a=(i=(r=(o=(s=u)[k]||(s[k]={}))[s.uniqueID]||(o[s.uniqueID]={}))[h]||[])[0]===E&&i[1])&&i[2],s=a&&u.childNodes[a];s=++a&&s&&s[c]||(f=a=0)||l.pop();)if(1===s.nodeType&&++f&&s===e){r[h]=[E,a,f];break}}else if(p&&(f=a=(i=(r=(o=(s=e)[k]||(s[k]={}))[s.uniqueID]||(o[s.uniqueID]={}))[h]||[])[0]===E&&i[1]),!1===f)for(;(s=++a&&s&&s[c]||(f=a=0)||l.pop())&&((x?s.nodeName.toLowerCase()!==d:1!==s.nodeType)||!++f||(p&&((r=(o=s[k]||(s[k]={}))[s.uniqueID]||(o[s.uniqueID]={}))[h]=[E,f]),s!==e)););return(f-=v)===g||f%g==0&&0<=f/g}}},PSEUDO:function(e,o){var t,s=b.pseudos[e]||b.setFilters[e.toLowerCase()]||ae.error("unsupported pseudo: "+e);return s[k]?s(o):1<s.length?(t=[e,e,"",o],b.setFilters.hasOwnProperty(e.toLowerCase())?ce(function(e,t){for(var n,i=s(e,o),r=i.length;r--;)e[n=I(e,i[r])]=!(t[n]=i[r])}):function(e){return s(e,0,t)}):s}},pseudos:{not:ce(function(e){var i=[],r=[],a=p(e.replace(B,"$1"));return a[k]?ce(function(e,t,n,i){for(var r,o=a(e,null,i,[]),s=e.length;s--;)(r=o[s])&&(e[s]=!(t[s]=r))}):function(e,t,n){return i[0]=e,a(i,null,n,r),i[0]=null,!r.pop()}}),has:ce(function(t){return function(e){return 0<ae(t,e).length}}),contains:ce(function(t){return t=t.replace(ie,d),function(e){return-1<(e.textContent||o(e)).indexOf(t)}}),lang:ce(function(n){return G.test(n||"")||ae.error("unsupported lang: "+n),n=n.replace(ie,d).toLowerCase(),function(e){var t;do{if(t=T?e.lang:e.getAttribute("xml:lang")||e.getAttribute("lang"))return(t=t.toLowerCase())===n||0===t.indexOf(n+"-")}while((e=e.parentNode)&&1===e.nodeType);return!1}}),target:function(e){var t=n.location&&n.location.hash;return t&&t.slice(1)===e.id},root:function(e){return e===a},focus:function(e){return e===C.activeElement&&(!C.hasFocus||C.hasFocus())&&!!(e.type||e.href||~e.tabIndex)},enabled:fe(!1),disabled:fe(!0),checked:function(e){var t=e.nodeName.toLowerCase();return"input"===t&&!!e.checked||"option"===t&&!!e.selected},selected:function(e){return e.parentNode&&e.parentNode.selectedIndex,!0===e.selected},empty:function(e){for(e=e.firstChild;e;e=e.nextSibling)if(e.nodeType<6)return!1;return!0},parent:function(e){return!b.pseudos.empty(e)},header:function(e){return K.test(e.nodeName)},input:function(e){return Z.test(e.nodeName)},button:function(e){var t=e.nodeName.toLowerCase();return"input"===t&&"button"===e.type||"button"===t},text:function(e){var t;return"input"===e.nodeName.toLowerCase()&&"text"===e.type&&(null==(t=e.getAttribute("type"))||"text"===t.toLowerCase())},first:he(function(){return[0]}),last:he(function(e,t){return[t-1]}),eq:he(function(e,t,n){return[n<0?n+t:n]}),even:he(function(e,t){for(var n=0;n<t;n+=2)e.push(n);return e}),odd:he(function(e,t){for(var n=1;n<t;n+=2)e.push(n);return e}),lt:he(function(e,t,n){for(var i=n<0?n+t:t<n?t:n;0<=--i;)e.push(i);return e}),gt:he(function(e,t,n){for(var i=n<0?n+t:n;++i<t;)e.push(i);return e})}}).pseudos.nth=b.pseudos.eq,{radio:!0,checkbox:!0,file:!0,password:!0,image:!0})b.pseudos[e]=function(t){return function(e){return"input"===e.nodeName.toLowerCase()&&e.type===t}}(e);for(e in{submit:!0,reset:!0})b.pseudos[e]=function(n){return function(e){var t=e.nodeName.toLowerCase();return("input"===t||"button"===t)&&e.type===n}}(e);function ve(){}function me(e){for(var t=0,n=e.length,i="";t<n;t++)i+=e[t].value;return i}function ye(a,e,t){var l=e.dir,c=e.next,u=c||l,d=t&&"parentNode"===u,p=i++;return e.first?function(e,t,n){for(;e=e[l];)if(1===e.nodeType||d)return a(e,t,n);return!1}:function(e,t,n){var i,r,o,s=[E,p];if(n){for(;e=e[l];)if((1===e.nodeType||d)&&a(e,t,n))return!0}else for(;e=e[l];)if(1===e.nodeType||d)if(r=(o=e[k]||(e[k]={}))[e.uniqueID]||(o[e.uniqueID]={}),c&&c===e.nodeName.toLowerCase())e=e[l]||e;else{if((i=r[u])&&i[0]===E&&i[1]===p)return s[2]=i[2];if((r[u]=s)[2]=a(e,t,n))return!0}return!1}}function xe(r){return 1<r.length?function(e,t,n){for(var i=r.length;i--;)if(!r[i](e,t,n))return!1;return!0}:r[0]}function be(e,t,n,i,r){for(var o,s=[],a=0,l=e.length,c=null!=t;a<l;a++)(o=e[a])&&(n&&!n(o,i,r)||(s.push(o),c&&t.push(a)));return s}function we(f,h,g,v,m,e){return v&&!v[k]&&(v=we(v)),m&&!m[k]&&(m=we(m,e)),ce(function(e,t,n,i){var r,o,s,a=[],l=[],c=t.length,u=e||function(e,t,n){for(var i=0,r=t.length;i<r;i++)ae(e,t[i],n);return n}(h||"*",n.nodeType?[n]:n,[]),d=!f||!e&&h?u:be(u,a,f,n,i),p=g?m||(e?f:c||v)?[]:t:d;if(g&&g(d,p,n,i),v)for(r=be(p,l),v(r,[],n,i),o=r.length;o--;)(s=r[o])&&(p[l[o]]=!(d[l[o]]=s));if(e){if(m||f){if(m){for(r=[],o=p.length;o--;)(s=p[o])&&r.push(d[o]=s);m(null,p=[],r,i)}for(o=p.length;o--;)(s=p[o])&&-1<(r=m?I(e,s):a[o])&&(e[r]=!(t[r]=s))}}else p=be(p===t?p.splice(c,p.length):p),m?m(null,t,p,i):H.apply(t,p)})}function Se(v,m){function e(e,t,n,i,r){var o,s,a,l=0,c="0",u=e&&[],d=[],p=w,f=e||x&&b.find.TAG("*",r),h=E+=null==p?1:Math.random()||.1,g=f.length;for(r&&(w=t==C||t||r);c!==g&&null!=(o=f[c]);c++){if(x&&o){for(s=0,t||o.ownerDocument==C||(S(o),n=!T);a=v[s++];)if(a(o,t||C,n)){i.push(o);break}r&&(E=h)}y&&((o=!a&&o)&&l--,e&&u.push(o))}if(l+=c,y&&c!==l){for(s=0;a=m[s++];)a(u,d,t,n);if(e){if(0<l)for(;c--;)u[c]||d[c]||(d[c]=P.call(i));d=be(d)}H.apply(i,d),r&&!e&&0<d.length&&1<l+m.length&&ae.uniqueSort(i)}return r&&(E=h,w=p),u}var y=0<m.length,x=0<v.length;return y?ce(e):e}return ve.prototype=b.filters=b.pseudos,b.setFilters=new ve,h=ae.tokenize=function(e,t){var n,i,r,o,s,a,l,c=D[e+" "];if(c)return t?0:c.slice(0);for(s=e,a=[],l=b.preFilter;s;){for(o in n&&!(i=X.exec(s))||(i&&(s=s.slice(i[0].length)||s),a.push(r=[])),n=!1,(i=U.exec(s))&&(n=i.shift(),r.push({value:n,type:i[0].replace(B," ")}),s=s.slice(n.length)),b.filter)!(i=Q[o].exec(s))||l[o]&&!(i=l[o](i))||(n=i.shift(),r.push({value:n,type:o,matches:i}),s=s.slice(n.length));if(!n)break}return t?s.length:s?ae.error(e):D(e,a).slice(0)},p=ae.compile=function(e,t){var n,i=[],r=[],o=N[e+" "];if(!o){for(n=(t=t||h(e)).length;n--;)(o=function e(t){for(var r,n,i,o=t.length,s=b.relative[t[0].type],a=s||b.relative[" "],l=s?1:0,c=ye(function(e){return e===r},a,!0),u=ye(function(e){return-1<I(r,e)},a,!0),d=[function(e,t,n){var i=!s&&(n||t!==w)||((r=t).nodeType?c:u)(e,t,n);return r=null,i}];l<o;l++)if(n=b.relative[t[l].type])d=[ye(xe(d),n)];else{if((n=b.filter[t[l].type].apply(null,t[l].matches))[k]){for(i=++l;i<o&&!b.relative[t[i].type];i++);return we(1<l&&xe(d),1<l&&me(t.slice(0,l-1).concat({value:" "===t[l-2].type?"*":""})).replace(B,"$1"),n,l<i&&e(t.slice(l,i)),i<o&&e(t=t.slice(i)),i<o&&me(t))}d.push(n)}return xe(d)}(t[n]))[k]?i.push(o):r.push(o);(o=N(e,Se(r,i))).selector=e}return o},g=ae.select=function(e,t,n,i){var r,o,s,a,l,c="function"==typeof e&&e,u=!i&&h(e=c.selector||e);if(n=n||[],1===u.length){if(2<(o=u[0]=u[0].slice(0)).length&&"ID"===(s=o[0]).type&&9===t.nodeType&&T&&b.relative[o[1].type]){if(!(t=(b.find.ID(s.matches[0].replace(ie,d),t)||[])[0]))return n;c&&(t=t.parentNode),e=e.slice(o.shift().value.length)}for(r=Q.needsContext.test(e)?0:o.length;r--&&(s=o[r],!b.relative[a=s.type]);)if((l=b.find[a])&&(i=l(s.matches[0].replace(ie,d),ne.test(o[0].type)&&ge(t.parentNode)||t))){if(o.splice(r,1),!(e=i.length&&me(o)))return H.apply(n,i),n;break}}return(c||p(e,u))(i,t,!T,n,!t||ne.test(e)&&ge(t.parentNode)||t),n},f.sortStable=k.split("").sort(q).join("")===k,f.detectDuplicates=!!c,S(),f.sortDetached=ue(function(e){return 1&e.compareDocumentPosition(C.createElement("fieldset"))}),ue(function(e){return e.innerHTML="<a href='#'></a>","#"===e.firstChild.getAttribute("href")})||de("type|href|height|width",function(e,t,n){if(!n)return e.getAttribute(t,"type"===t.toLowerCase()?1:2)}),f.attributes&&ue(function(e){return e.innerHTML="<input/>",e.firstChild.setAttribute("value",""),""===e.firstChild.getAttribute("value")})||de("value",function(e,t,n){if(!n&&"input"===e.nodeName.toLowerCase())return e.defaultValue}),ue(function(e){return null==e.getAttribute("disabled")})||de(O,function(e,t,n){var i;if(!n)return!0===e[t]?t.toLowerCase():(i=e.getAttributeNode(t))&&i.specified?i.value:null}),ae}(C);k.find=f,k.expr=f.selectors,k.expr[":"]=k.expr.pseudos,k.uniqueSort=k.unique=f.uniqueSort,k.text=f.getText,k.isXMLDoc=f.isXML,k.contains=f.contains,k.escapeSelector=f.escape;function h(e,t,n){for(var i=[],r=void 0!==n;(e=e[t])&&9!==e.nodeType;)if(1===e.nodeType){if(r&&k(e).is(n))break;i.push(e)}return i}function S(e,t){for(var n=[];e;e=e.nextSibling)1===e.nodeType&&e!==t&&n.push(e);return n}var E=k.expr.match.needsContext;function A(e,t){return e.nodeName&&e.nodeName.toLowerCase()===t.toLowerCase()}var D=/^<([a-z][^\/\0>:\x20\t\r\n\f]*)[\x20\t\r\n\f]*\/?>(?:<\/\1>|)$/i;function N(e,n,i){return x(n)?k.grep(e,function(e,t){return!!n.call(e,t,e)!==i}):n.nodeType?k.grep(e,function(e){return e===n!==i}):"string"!=typeof n?k.grep(e,function(e){return-1<r.call(n,e)!==i}):k.filter(n,e,i)}k.filter=function(e,t,n){var i=t[0];return n&&(e=":not("+e+")"),1===t.length&&1===i.nodeType?k.find.matchesSelector(i,e)?[i]:[]:k.find.matches(e,k.grep(t,function(e){return 1===e.nodeType}))},k.fn.extend({find:function(e){var t,n,i=this.length,r=this;if("string"!=typeof e)return this.pushStack(k(e).filter(function(){for(t=0;t<i;t++)if(k.contains(r[t],this))return!0}));for(n=this.pushStack([]),t=0;t<i;t++)k.find(e,r[t],n);return 1<i?k.uniqueSort(n):n},filter:function(e){return this.pushStack(N(this,e||[],!1))},not:function(e){return this.pushStack(N(this,e||[],!0))},is:function(e){return!!N(this,"string"==typeof e&&E.test(e)?k(e):e||[],!1).length}});var L,q=/^(?:\s*(<[\w\W]+>)[^>]*|#([\w-]+))$/;(k.fn.init=function(e,t,n){var i,r;if(!e)return this;if(n=n||L,"string"!=typeof e)return e.nodeType?(this[0]=e,this.length=1,this):x(e)?void 0!==n.ready?n.ready(e):e(k):k.makeArray(e,this);if(!(i="<"===e[0]&&">"===e[e.length-1]&&3<=e.length?[null,e,null]:q.exec(e))||!i[1]&&t)return!t||t.jquery?(t||n).find(e):this.constructor(t).find(e);if(i[1]){if(t=t instanceof k?t[0]:t,k.merge(this,k.parseHTML(i[1],t&&t.nodeType?t.ownerDocument||t:T,!0)),D.test(i[1])&&k.isPlainObject(t))for(i in t)x(this[i])?this[i](t[i]):this.attr(i,t[i]);return this}return(r=T.getElementById(i[2]))&&(this[0]=r,this.length=1),this}).prototype=k.fn,L=k(T);var j=/^(?:parents|prev(?:Until|All))/,P={children:!0,contents:!0,next:!0,prev:!0};function M(e,t){for(;(e=e[t])&&1!==e.nodeType;);return e}k.fn.extend({has:function(e){var t=k(e,this),n=t.length;return this.filter(function(){for(var e=0;e<n;e++)if(k.contains(this,t[e]))return!0})},closest:function(e,t){var n,i=0,r=this.length,o=[],s="string"!=typeof e&&k(e);if(!E.test(e))for(;i<r;i++)for(n=this[i];n&&n!==t;n=n.parentNode)if(n.nodeType<11&&(s?-1<s.index(n):1===n.nodeType&&k.find.matchesSelector(n,e))){o.push(n);break}return this.pushStack(1<o.length?k.uniqueSort(o):o)},index:function(e){return e?"string"==typeof e?r.call(k(e),this[0]):r.call(this,e.jquery?e[0]:e):this[0]&&this[0].parentNode?this.first().prevAll().length:-1},add:function(e,t){return this.pushStack(k.uniqueSort(k.merge(this.get(),k(e,t))))},addBack:function(e){return this.add(null==e?this.prevObject:this.prevObject.filter(e))}}),k.each({parent:function(e){var t=e.parentNode;return t&&11!==t.nodeType?t:null},parents:function(e){return h(e,"parentNode")},parentsUntil:function(e,t,n){return h(e,"parentNode",n)},next:function(e){return M(e,"nextSibling")},prev:function(e){return M(e,"previousSibling")},nextAll:function(e){return h(e,"nextSibling")},prevAll:function(e){return h(e,"previousSibling")},nextUntil:function(e,t,n){return h(e,"nextSibling",n)},prevUntil:function(e,t,n){return h(e,"previousSibling",n)},siblings:function(e){return S((e.parentNode||{}).firstChild,e)},children:function(e){return S(e.firstChild)},contents:function(e){return null!=e.contentDocument&&i(e.contentDocument)?e.contentDocument:(A(e,"template")&&(e=e.content||e),k.merge([],e.childNodes))}},function(i,r){k.fn[i]=function(e,t){var n=k.map(this,r,e);return"Until"!==i.slice(-5)&&(t=e),t&&"string"==typeof t&&(n=k.filter(t,n)),1<this.length&&(P[i]||k.uniqueSort(n),j.test(i)&&n.reverse()),this.pushStack(n)}});var H=/[^\x20\t\r\n\f]+/g;function _(e){return e}function I(e){throw e}function O(e,t,n,i){var r;try{e&&x(r=e.promise)?r.call(e).done(t).fail(n):e&&x(r=e.then)?r.call(e,t,n):t.apply(void 0,[e].slice(i))}catch(e){n.apply(void 0,[e])}}k.Callbacks=function(i){var e,n;i="string"==typeof i?(e=i,n={},k.each(e.match(H)||[],function(e,t){n[t]=!0}),n):k.extend({},i);function r(){for(a=a||i.once,s=o=!0;c.length;u=-1)for(t=c.shift();++u<l.length;)!1===l[u].apply(t[0],t[1])&&i.stopOnFalse&&(u=l.length,t=!1);i.memory||(t=!1),o=!1,a&&(l=t?[]:"")}var o,t,s,a,l=[],c=[],u=-1,d={add:function(){return l&&(t&&!o&&(u=l.length-1,c.push(t)),function n(e){k.each(e,function(e,t){x(t)?i.unique&&d.has(t)||l.push(t):t&&t.length&&"string"!==w(t)&&n(t)})}(arguments),t&&!o&&r()),this},remove:function(){return k.each(arguments,function(e,t){for(var n;-1<(n=k.inArray(t,l,n));)l.splice(n,1),n<=u&&u--}),this},has:function(e){return e?-1<k.inArray(e,l):0<l.length},empty:function(){return l=l&&[],this},disable:function(){return a=c=[],l=t="",this},disabled:function(){return!l},lock:function(){return a=c=[],t||o||(l=t=""),this},locked:function(){return!!a},fireWith:function(e,t){return a||(t=[e,(t=t||[]).slice?t.slice():t],c.push(t),o||r()),this},fire:function(){return d.fireWith(this,arguments),this},fired:function(){return!!s}};return d},k.extend({Deferred:function(e){var o=[["notify","progress",k.Callbacks("memory"),k.Callbacks("memory"),2],["resolve","done",k.Callbacks("once memory"),k.Callbacks("once memory"),0,"resolved"],["reject","fail",k.Callbacks("once memory"),k.Callbacks("once memory"),1,"rejected"]],r="pending",s={state:function(){return r},always:function(){return a.done(arguments).fail(arguments),this},catch:function(e){return s.then(null,e)},pipe:function(){var r=arguments;return k.Deferred(function(i){k.each(o,function(e,t){var n=x(r[t[4]])&&r[t[4]];a[t[1]](function(){var e=n&&n.apply(this,arguments);e&&x(e.promise)?e.promise().progress(i.notify).done(i.resolve).fail(i.reject):i[t[0]+"With"](this,n?[e]:arguments)})}),r=null}).promise()},then:function(t,n,i){var l=0;function c(r,o,s,a){return function(){function e(){var e,t;if(!(r<l)){if((e=s.apply(n,i))===o.promise())throw new TypeError("Thenable self-resolution");t=e&&("object"===_typeof(e)||"function"==typeof e)&&e.then,x(t)?a?t.call(e,c(l,o,_,a),c(l,o,I,a)):(l++,t.call(e,c(l,o,_,a),c(l,o,I,a),c(l,o,_,o.notifyWith))):(s!==_&&(n=void 0,i=[e]),(a||o.resolveWith)(n,i))}}var n=this,i=arguments,t=a?e:function(){try{e()}catch(e){k.Deferred.exceptionHook&&k.Deferred.exceptionHook(e,t.stackTrace),l<=r+1&&(s!==I&&(n=void 0,i=[e]),o.rejectWith(n,i))}};r?t():(k.Deferred.getStackHook&&(t.stackTrace=k.Deferred.getStackHook()),C.setTimeout(t))}}return k.Deferred(function(e){o[0][3].add(c(0,e,x(i)?i:_,e.notifyWith)),o[1][3].add(c(0,e,x(t)?t:_)),o[2][3].add(c(0,e,x(n)?n:I))}).promise()},promise:function(e){return null!=e?k.extend(e,s):s}},a={};return k.each(o,function(e,t){var n=t[2],i=t[5];s[t[1]]=n.add,i&&n.add(function(){r=i},o[3-e][2].disable,o[3-e][3].disable,o[0][2].lock,o[0][3].lock),n.add(t[3].fire),a[t[0]]=function(){return a[t[0]+"With"](this===a?void 0:this,arguments),this},a[t[0]+"With"]=n.fireWith}),s.promise(a),e&&e.call(a,a),a},when:function(e){function t(t){return function(e){r[t]=this,o[t]=1<arguments.length?a.call(arguments):e,--n||s.resolveWith(r,o)}}var n=arguments.length,i=n,r=Array(i),o=a.call(arguments),s=k.Deferred();if(n<=1&&(O(e,s.done(t(i)).resolve,s.reject,!n),"pending"===s.state()||x(o[i]&&o[i].then)))return s.then();for(;i--;)O(o[i],t(i),s.reject);return s.promise()}});var R=/^(Eval|Internal|Range|Reference|Syntax|Type|URI)Error$/;k.Deferred.exceptionHook=function(e,t){C.console&&C.console.warn&&e&&R.test(e.name)&&C.console.warn("jQuery.Deferred exception: "+e.message,e.stack,t)},k.readyException=function(e){C.setTimeout(function(){throw e})};var $=k.Deferred();function W(){T.removeEventListener("DOMContentLoaded",W),C.removeEventListener("load",W),k.ready()}k.fn.ready=function(e){return $.then(e).catch(function(e){k.readyException(e)}),this},k.extend({isReady:!1,readyWait:1,ready:function(e){(!0===e?--k.readyWait:k.isReady)||(k.isReady=!0)!==e&&0<--k.readyWait||$.resolveWith(T,[k])}}),k.ready.then=$.then,"complete"===T.readyState||"loading"!==T.readyState&&!T.documentElement.doScroll?C.setTimeout(k.ready):(T.addEventListener("DOMContentLoaded",W),C.addEventListener("load",W));function z(e,t,n,i,r,o,s){var a=0,l=e.length,c=null==n;if("object"===w(n))for(a in r=!0,n)z(e,t,a,n[a],!0,o,s);else if(void 0!==i&&(r=!0,x(i)||(s=!0),c&&(t=s?(t.call(e,i),null):(c=t,function(e,t,n){return c.call(k(e),n)})),t))for(;a<l;a++)t(e[a],n,s?i:i.call(e[a],a,t(e[a],n)));return r?e:c?t.call(e):l?t(e[0],n):o}var F=/^-ms-/,B=/-([a-z])/g;function X(e,t){return t.toUpperCase()}function U(e){return e.replace(F,"ms-").replace(B,X)}function V(e){return 1===e.nodeType||9===e.nodeType||!+e.nodeType}function Y(){this.expando=k.expando+Y.uid++}Y.uid=1,Y.prototype={cache:function(e){var t=e[this.expando];return t||(t={},V(e)&&(e.nodeType?e[this.expando]=t:Object.defineProperty(e,this.expando,{value:t,configurable:!0}))),t},set:function(e,t,n){var i,r=this.cache(e);if("string"==typeof t)r[U(t)]=n;else for(i in t)r[U(i)]=t[i];return r},get:function(e,t){return void 0===t?this.cache(e):e[this.expando]&&e[this.expando][U(t)]},access:function(e,t,n){return void 0===t||t&&"string"==typeof t&&void 0===n?this.get(e,t):(this.set(e,t,n),void 0!==n?n:t)},remove:function(e,t){var n,i=e[this.expando];if(void 0!==i){if(void 0!==t){n=(t=Array.isArray(t)?t.map(U):(t=U(t))in i?[t]:t.match(H)||[]).length;for(;n--;)delete i[t[n]]}void 0!==t&&!k.isEmptyObject(i)||(e.nodeType?e[this.expando]=void 0:delete e[this.expando])}},hasData:function(e){var t=e[this.expando];return void 0!==t&&!k.isEmptyObject(t)}};var G=new Y,Q=new Y,J=/^(?:\{[\w\W]*\}|\[[\w\W]*\])$/,Z=/[A-Z]/g;function K(e,t,n){var i,r;if(void 0===n&&1===e.nodeType)if(i="data-"+t.replace(Z,"-$&").toLowerCase(),"string"==typeof(n=e.getAttribute(i))){try{n="true"===(r=n)||"false"!==r&&("null"===r?null:r===+r+""?+r:J.test(r)?JSON.parse(r):r)}catch(e){}Q.set(e,t,n)}else n=void 0;return n}k.extend({hasData:function(e){return Q.hasData(e)||G.hasData(e)},data:function(e,t,n){return Q.access(e,t,n)},removeData:function(e,t){Q.remove(e,t)},_data:function(e,t,n){return G.access(e,t,n)},_removeData:function(e,t){G.remove(e,t)}}),k.fn.extend({data:function(n,e){var t,i,r,o=this[0],s=o&&o.attributes;if(void 0!==n)return"object"===_typeof(n)?this.each(function(){Q.set(this,n)}):z(this,function(e){var t;return o&&void 0===e?void 0!==(t=Q.get(o,n))||void 0!==(t=K(o,n))?t:void 0:void this.each(function(){Q.set(this,n,e)})},null,e,1<arguments.length,null,!0);if(this.length&&(r=Q.get(o),1===o.nodeType&&!G.get(o,"hasDataAttrs"))){for(t=s.length;t--;)s[t]&&0===(i=s[t].name).indexOf("data-")&&(i=U(i.slice(5)),K(o,i,r[i]));G.set(o,"hasDataAttrs",!0)}return r},removeData:function(e){return this.each(function(){Q.remove(this,e)})}}),k.extend({queue:function(e,t,n){var i;if(e)return t=(t||"fx")+"queue",i=G.get(e,t),n&&(!i||Array.isArray(n)?i=G.access(e,t,k.makeArray(n)):i.push(n)),i||[]},dequeue:function(e,t){t=t||"fx";var n=k.queue(e,t),i=n.length,r=n.shift(),o=k._queueHooks(e,t);"inprogress"===r&&(r=n.shift(),i--),r&&("fx"===t&&n.unshift("inprogress"),delete o.stop,r.call(e,function(){k.dequeue(e,t)},o)),!i&&o&&o.empty.fire()},_queueHooks:function(e,t){var n=t+"queueHooks";return G.get(e,n)||G.access(e,n,{empty:k.Callbacks("once memory").add(function(){G.remove(e,[t+"queue",n])})})}}),k.fn.extend({queue:function(t,n){var e=2;return"string"!=typeof t&&(n=t,t="fx",e--),arguments.length<e?k.queue(this[0],t):void 0===n?this:this.each(function(){var e=k.queue(this,t,n);k._queueHooks(this,t),"fx"===t&&"inprogress"!==e[0]&&k.dequeue(this,t)})},dequeue:function(e){return this.each(function(){k.dequeue(this,e)})},clearQueue:function(e){return this.queue(e||"fx",[])},promise:function(e,t){function n(){--r||o.resolveWith(s,[s])}var i,r=1,o=k.Deferred(),s=this,a=this.length;for("string"!=typeof e&&(t=e,e=void 0),e=e||"fx";a--;)(i=G.get(s[a],e+"queueHooks"))&&i.empty&&(r++,i.empty.add(n));return n(),o.promise(t)}});var ee=/[+-]?(?:\d*\.|)\d+(?:[eE][+-]?\d+|)/.source,te=new RegExp("^(?:([+-])=|)("+ee+")([a-z%]*)$","i"),ne=["Top","Right","Bottom","Left"],ie=T.documentElement,re=function(e){return k.contains(e.ownerDocument,e)},oe={composed:!0};ie.getRootNode&&(re=function(e){return k.contains(e.ownerDocument,e)||e.getRootNode(oe)===e.ownerDocument});var se=function(e,t){return"none"===(e=t||e).style.display||""===e.style.display&&re(e)&&"none"===k.css(e,"display")};function ae(e,t,n,i){var r,o,s=20,a=i?function(){return i.cur()}:function(){return k.css(e,t,"")},l=a(),c=n&&n[3]||(k.cssNumber[t]?"":"px"),u=e.nodeType&&(k.cssNumber[t]||"px"!==c&&+l)&&te.exec(k.css(e,t));if(u&&u[3]!==c){for(l/=2,c=c||u[3],u=+l||1;s--;)k.style(e,t,u+c),(1-o)*(1-(o=a()/l||.5))<=0&&(s=0),u/=o;u*=2,k.style(e,t,u+c),n=n||[]}return n&&(u=+u||+l||0,r=n[1]?u+(n[1]+1)*n[2]:+n[2],i&&(i.unit=c,i.start=u,i.end=r)),r}var le={};function ce(e,t){for(var n,i,r,o,s,a,l,c=[],u=0,d=e.length;u<d;u++)(i=e[u]).style&&(n=i.style.display,t?("none"===n&&(c[u]=G.get(i,"display")||null,c[u]||(i.style.display="")),""===i.style.display&&se(i)&&(c[u]=(l=a=s=o=void 0,s=(r=i).ownerDocument,a=r.nodeName,(l=le[a])||(o=s.body.appendChild(s.createElement(a)),l=k.css(o,"display"),o.parentNode.removeChild(o),"none"===l&&(l="block"),le[a]=l)))):"none"!==n&&(c[u]="none",G.set(i,"display",n)));for(u=0;u<d;u++)null!=c[u]&&(e[u].style.display=c[u]);return e}k.fn.extend({show:function(){return ce(this,!0)},hide:function(){return ce(this)},toggle:function(e){return"boolean"==typeof e?e?this.show():this.hide():this.each(function(){se(this)?k(this).show():k(this).hide()})}});var ue,de,pe=/^(?:checkbox|radio)$/i,fe=/<([a-z][^\/\0>\x20\t\r\n\f]*)/i,he=/^$|^module$|\/(?:java|ecma)script/i;ue=T.createDocumentFragment().appendChild(T.createElement("div")),(de=T.createElement("input")).setAttribute("type","radio"),de.setAttribute("checked","checked"),de.setAttribute("name","t"),ue.appendChild(de),y.checkClone=ue.cloneNode(!0).cloneNode(!0).lastChild.checked,ue.innerHTML="<textarea>x</textarea>",y.noCloneChecked=!!ue.cloneNode(!0).lastChild.defaultValue,ue.innerHTML="<option></option>",y.option=!!ue.lastChild;var ge={thead:[1,"<table>","</table>"],col:[2,"<table><colgroup>","</colgroup></table>"],tr:[2,"<table><tbody>","</tbody></table>"],td:[3,"<table><tbody><tr>","</tr></tbody></table>"],_default:[0,"",""]};function ve(e,t){var n=void 0!==e.getElementsByTagName?e.getElementsByTagName(t||"*"):void 0!==e.querySelectorAll?e.querySelectorAll(t||"*"):[];return void 0===t||t&&A(e,t)?k.merge([e],n):n}function me(e,t){for(var n=0,i=e.length;n<i;n++)G.set(e[n],"globalEval",!t||G.get(t[n],"globalEval"))}ge.tbody=ge.tfoot=ge.colgroup=ge.caption=ge.thead,ge.th=ge.td,y.option||(ge.optgroup=ge.option=[1,"<select multiple='multiple'>","</select>"]);var ye=/<|&#?\w+;/;function xe(e,t,n,i,r){for(var o,s,a,l,c,u,d=t.createDocumentFragment(),p=[],f=0,h=e.length;f<h;f++)if((o=e[f])||0===o)if("object"===w(o))k.merge(p,o.nodeType?[o]:o);else if(ye.test(o)){for(s=s||d.appendChild(t.createElement("div")),a=(fe.exec(o)||["",""])[1].toLowerCase(),l=ge[a]||ge._default,s.innerHTML=l[1]+k.htmlPrefilter(o)+l[2],u=l[0];u--;)s=s.lastChild;k.merge(p,s.childNodes),(s=d.firstChild).textContent=""}else p.push(t.createTextNode(o));for(d.textContent="",f=0;o=p[f++];)if(i&&-1<k.inArray(o,i))r&&r.push(o);else if(c=re(o),s=ve(d.appendChild(o),"script"),c&&me(s),n)for(u=0;o=s[u++];)he.test(o.type||"")&&n.push(o);return d}var be=/^key/,we=/^(?:mouse|pointer|contextmenu|drag|drop)|click/,Se=/^([^.]*)(?:\.(.+)|)/;function Ce(){return!0}function Te(){return!1}function ke(e,t){return e===function(){try{return T.activeElement}catch(e){}}()==("focus"===t)}function Ee(e,t,n,i,r,o){var s,a;if("object"===_typeof(t)){for(a in"string"!=typeof n&&(i=i||n,n=void 0),t)Ee(e,a,n,i,t[a],o);return e}if(null==i&&null==r?(r=n,i=n=void 0):null==r&&("string"==typeof n?(r=i,i=void 0):(r=i,i=n,n=void 0)),!1===r)r=Te;else if(!r)return e;return 1===o&&(s=r,(r=function(e){return k().off(e),s.apply(this,arguments)}).guid=s.guid||(s.guid=k.guid++)),e.each(function(){k.event.add(this,t,r,i,n)})}function Ae(e,r,o){o?(G.set(e,r,!1),k.event.add(e,r,{namespace:!1,handler:function(e){var t,n,i=G.get(this,r);if(1&e.isTrigger&&this[r]){if(i.length)(k.event.special[r]||{}).delegateType&&e.stopPropagation();else if(i=a.call(arguments),G.set(this,r,i),t=o(this,r),this[r](),i!==(n=G.get(this,r))||t?G.set(this,r,!1):n={},i!==n)return e.stopImmediatePropagation(),e.preventDefault(),n.value}else i.length&&(G.set(this,r,{value:k.event.trigger(k.extend(i[0],k.Event.prototype),i.slice(1),this)}),e.stopImmediatePropagation())}})):void 0===G.get(e,r)&&k.event.add(e,r,Ce)}k.event={global:{},add:function(t,e,n,i,r){var o,s,a,l,c,u,d,p,f,h,g,v=G.get(t);if(V(t))for(n.handler&&(n=(o=n).handler,r=o.selector),r&&k.find.matchesSelector(ie,r),n.guid||(n.guid=k.guid++),(l=v.events)||(l=v.events=Object.create(null)),(s=v.handle)||(s=v.handle=function(e){return void 0!==k&&k.event.triggered!==e.type?k.event.dispatch.apply(t,arguments):void 0}),c=(e=(e||"").match(H)||[""]).length;c--;)f=g=(a=Se.exec(e[c])||[])[1],h=(a[2]||"").split(".").sort(),f&&(d=k.event.special[f]||{},f=(r?d.delegateType:d.bindType)||f,d=k.event.special[f]||{},u=k.extend({type:f,origType:g,data:i,handler:n,guid:n.guid,selector:r,needsContext:r&&k.expr.match.needsContext.test(r),namespace:h.join(".")},o),(p=l[f])||((p=l[f]=[]).delegateCount=0,d.setup&&!1!==d.setup.call(t,i,h,s)||t.addEventListener&&t.addEventListener(f,s)),d.add&&(d.add.call(t,u),u.handler.guid||(u.handler.guid=n.guid)),r?p.splice(p.delegateCount++,0,u):p.push(u),k.event.global[f]=!0)},remove:function(e,t,n,i,r){var o,s,a,l,c,u,d,p,f,h,g,v=G.hasData(e)&&G.get(e);if(v&&(l=v.events)){for(c=(t=(t||"").match(H)||[""]).length;c--;)if(f=g=(a=Se.exec(t[c])||[])[1],h=(a[2]||"").split(".").sort(),f){for(d=k.event.special[f]||{},p=l[f=(i?d.delegateType:d.bindType)||f]||[],a=a[2]&&new RegExp("(^|\\.)"+h.join("\\.(?:.*\\.|)")+"(\\.|$)"),s=o=p.length;o--;)u=p[o],!r&&g!==u.origType||n&&n.guid!==u.guid||a&&!a.test(u.namespace)||i&&i!==u.selector&&("**"!==i||!u.selector)||(p.splice(o,1),u.selector&&p.delegateCount--,d.remove&&d.remove.call(e,u));s&&!p.length&&(d.teardown&&!1!==d.teardown.call(e,h,v.handle)||k.removeEvent(e,f,v.handle),delete l[f])}else for(f in l)k.event.remove(e,f+t[c],n,i,!0);k.isEmptyObject(l)&&G.remove(e,"handle events")}},dispatch:function(e){var t,n,i,r,o,s,a=new Array(arguments.length),l=k.event.fix(e),c=(G.get(this,"events")||Object.create(null))[l.type]||[],u=k.event.special[l.type]||{};for(a[0]=l,t=1;t<arguments.length;t++)a[t]=arguments[t];if(l.delegateTarget=this,!u.preDispatch||!1!==u.preDispatch.call(this,l)){for(s=k.event.handlers.call(this,l,c),t=0;(r=s[t++])&&!l.isPropagationStopped();)for(l.currentTarget=r.elem,n=0;(o=r.handlers[n++])&&!l.isImmediatePropagationStopped();)l.rnamespace&&!1!==o.namespace&&!l.rnamespace.test(o.namespace)||(l.handleObj=o,l.data=o.data,void 0!==(i=((k.event.special[o.origType]||{}).handle||o.handler).apply(r.elem,a))&&!1===(l.result=i)&&(l.preventDefault(),l.stopPropagation()));return u.postDispatch&&u.postDispatch.call(this,l),l.result}},handlers:function(e,t){var n,i,r,o,s,a=[],l=t.delegateCount,c=e.target;if(l&&c.nodeType&&!("click"===e.type&&1<=e.button))for(;c!==this;c=c.parentNode||this)if(1===c.nodeType&&("click"!==e.type||!0!==c.disabled)){for(o=[],s={},n=0;n<l;n++)void 0===s[r=(i=t[n]).selector+" "]&&(s[r]=i.needsContext?-1<k(r,this).index(c):k.find(r,this,null,[c]).length),s[r]&&o.push(i);o.length&&a.push({elem:c,handlers:o})}return c=this,l<t.length&&a.push({elem:c,handlers:t.slice(l)}),a},addProp:function(t,e){Object.defineProperty(k.Event.prototype,t,{enumerable:!0,configurable:!0,get:x(e)?function(){if(this.originalEvent)return e(this.originalEvent)}:function(){if(this.originalEvent)return this.originalEvent[t]},set:function(e){Object.defineProperty(this,t,{enumerable:!0,configurable:!0,writable:!0,value:e})}})},fix:function(e){return e[k.expando]?e:new k.Event(e)},special:{load:{noBubble:!0},click:{setup:function(e){var t=this||e;return pe.test(t.type)&&t.click&&A(t,"input")&&Ae(t,"click",Ce),!1},trigger:function(e){var t=this||e;return pe.test(t.type)&&t.click&&A(t,"input")&&Ae(t,"click"),!0},_default:function(e){var t=e.target;return pe.test(t.type)&&t.click&&A(t,"input")&&G.get(t,"click")||A(t,"a")}},beforeunload:{postDispatch:function(e){void 0!==e.result&&e.originalEvent&&(e.originalEvent.returnValue=e.result)}}}},k.removeEvent=function(e,t,n){e.removeEventListener&&e.removeEventListener(t,n)},k.Event=function(e,t){if(!(this instanceof k.Event))return new k.Event(e,t);e&&e.type?(this.originalEvent=e,this.type=e.type,this.isDefaultPrevented=e.defaultPrevented||void 0===e.defaultPrevented&&!1===e.returnValue?Ce:Te,this.target=e.target&&3===e.target.nodeType?e.target.parentNode:e.target,this.currentTarget=e.currentTarget,this.relatedTarget=e.relatedTarget):this.type=e,t&&k.extend(this,t),this.timeStamp=e&&e.timeStamp||Date.now(),this[k.expando]=!0},k.Event.prototype={constructor:k.Event,isDefaultPrevented:Te,isPropagationStopped:Te,isImmediatePropagationStopped:Te,isSimulated:!1,preventDefault:function(){var e=this.originalEvent;this.isDefaultPrevented=Ce,e&&!this.isSimulated&&e.preventDefault()},stopPropagation:function(){var e=this.originalEvent;this.isPropagationStopped=Ce,e&&!this.isSimulated&&e.stopPropagation()},stopImmediatePropagation:function(){var e=this.originalEvent;this.isImmediatePropagationStopped=Ce,e&&!this.isSimulated&&e.stopImmediatePropagation(),this.stopPropagation()}},k.each({altKey:!0,bubbles:!0,cancelable:!0,changedTouches:!0,ctrlKey:!0,detail:!0,eventPhase:!0,metaKey:!0,pageX:!0,pageY:!0,shiftKey:!0,view:!0,char:!0,code:!0,charCode:!0,key:!0,keyCode:!0,button:!0,buttons:!0,clientX:!0,clientY:!0,offsetX:!0,offsetY:!0,pointerId:!0,pointerType:!0,screenX:!0,screenY:!0,targetTouches:!0,toElement:!0,touches:!0,which:function(e){var t=e.button;return null==e.which&&be.test(e.type)?null!=e.charCode?e.charCode:e.keyCode:!e.which&&void 0!==t&&we.test(e.type)?1&t?1:2&t?3:4&t?2:0:e.which}},k.event.addProp),k.each({focus:"focusin",blur:"focusout"},function(e,t){k.event.special[e]={setup:function(){return Ae(this,e,ke),!1},trigger:function(){return Ae(this,e),!0},delegateType:t}}),k.each({mouseenter:"mouseover",mouseleave:"mouseout",pointerenter:"pointerover",pointerleave:"pointerout"},function(e,r){k.event.special[e]={delegateType:r,bindType:r,handle:function(e){var t,n=e.relatedTarget,i=e.handleObj;return n&&(n===this||k.contains(this,n))||(e.type=i.origType,t=i.handler.apply(this,arguments),e.type=r),t}}}),k.fn.extend({on:function(e,t,n,i){return Ee(this,e,t,n,i)},one:function(e,t,n,i){return Ee(this,e,t,n,i,1)},off:function(e,t,n){var i,r;if(e&&e.preventDefault&&e.handleObj)return i=e.handleObj,k(e.delegateTarget).off(i.namespace?i.origType+"."+i.namespace:i.origType,i.selector,i.handler),this;if("object"!==_typeof(e))return!1!==t&&"function"!=typeof t||(n=t,t=void 0),!1===n&&(n=Te),this.each(function(){k.event.remove(this,e,n,t)});for(r in e)this.off(r,t,e[r]);return this}});var De=/<script|<style|<link/i,Ne=/checked\s*(?:[^=]|=\s*.checked.)/i,Le=/^\s*<!(?:\[CDATA\[|--)|(?:\]\]|--)>\s*$/g;function qe(e,t){return A(e,"table")&&A(11!==t.nodeType?t:t.firstChild,"tr")&&k(e).children("tbody")[0]||e}function je(e){return e.type=(null!==e.getAttribute("type"))+"/"+e.type,e}function Pe(e){return"true/"===(e.type||"").slice(0,5)?e.type=e.type.slice(5):e.removeAttribute("type"),e}function Me(e,t){var n,i,r,o,s,a;if(1===t.nodeType){if(G.hasData(e)&&(a=G.get(e).events))for(r in G.remove(t,"handle events"),a)for(n=0,i=a[r].length;n<i;n++)k.event.add(t,r,a[r][n]);Q.hasData(e)&&(o=Q.access(e),s=k.extend({},o),Q.set(t,s))}}function He(n,i,r,o){i=v(i);var e,t,s,a,l,c,u=0,d=n.length,p=d-1,f=i[0],h=x(f);if(h||1<d&&"string"==typeof f&&!y.checkClone&&Ne.test(f))return n.each(function(e){var t=n.eq(e);h&&(i[0]=f.call(this,e,t.html())),He(t,i,r,o)});if(d&&(t=(e=xe(i,n[0].ownerDocument,!1,n,o)).firstChild,1===e.childNodes.length&&(e=t),t||o)){for(a=(s=k.map(ve(e,"script"),je)).length;u<d;u++)l=e,u!==p&&(l=k.clone(l,!0,!0),a&&k.merge(s,ve(l,"script"))),r.call(n[u],l,u);if(a)for(c=s[s.length-1].ownerDocument,k.map(s,Pe),u=0;u<a;u++)l=s[u],he.test(l.type||"")&&!G.access(l,"globalEval")&&k.contains(c,l)&&(l.src&&"module"!==(l.type||"").toLowerCase()?k._evalUrl&&!l.noModule&&k._evalUrl(l.src,{nonce:l.nonce||l.getAttribute("nonce")},c):b(l.textContent.replace(Le,""),l,c))}return n}function _e(e,t,n){for(var i,r=t?k.filter(t,e):e,o=0;null!=(i=r[o]);o++)n||1!==i.nodeType||k.cleanData(ve(i)),i.parentNode&&(n&&re(i)&&me(ve(i,"script")),i.parentNode.removeChild(i));return e}k.extend({htmlPrefilter:function(e){return e},clone:function(e,t,n){var i,r,o,s,a,l,c,u=e.cloneNode(!0),d=re(e);if(!(y.noCloneChecked||1!==e.nodeType&&11!==e.nodeType||k.isXMLDoc(e)))for(s=ve(u),i=0,r=(o=ve(e)).length;i<r;i++)a=o[i],l=s[i],c=void 0,"input"===(c=l.nodeName.toLowerCase())&&pe.test(a.type)?l.checked=a.checked:"input"!==c&&"textarea"!==c||(l.defaultValue=a.defaultValue);if(t)if(n)for(o=o||ve(e),s=s||ve(u),i=0,r=o.length;i<r;i++)Me(o[i],s[i]);else Me(e,u);return 0<(s=ve(u,"script")).length&&me(s,!d&&ve(e,"script")),u},cleanData:function(e){for(var t,n,i,r=k.event.special,o=0;void 0!==(n=e[o]);o++)if(V(n)){if(t=n[G.expando]){if(t.events)for(i in t.events)r[i]?k.event.remove(n,i):k.removeEvent(n,i,t.handle);n[G.expando]=void 0}n[Q.expando]&&(n[Q.expando]=void 0)}}}),k.fn.extend({detach:function(e){return _e(this,e,!0)},remove:function(e){return _e(this,e)},text:function(e){return z(this,function(e){return void 0===e?k.text(this):this.empty().each(function(){1!==this.nodeType&&11!==this.nodeType&&9!==this.nodeType||(this.textContent=e)})},null,e,arguments.length)},append:function(){return He(this,arguments,function(e){1!==this.nodeType&&11!==this.nodeType&&9!==this.nodeType||qe(this,e).appendChild(e)})},prepend:function(){return He(this,arguments,function(e){var t;1!==this.nodeType&&11!==this.nodeType&&9!==this.nodeType||(t=qe(this,e)).insertBefore(e,t.firstChild)})},before:function(){return He(this,arguments,function(e){this.parentNode&&this.parentNode.insertBefore(e,this)})},after:function(){return He(this,arguments,function(e){this.parentNode&&this.parentNode.insertBefore(e,this.nextSibling)})},empty:function(){for(var e,t=0;null!=(e=this[t]);t++)1===e.nodeType&&(k.cleanData(ve(e,!1)),e.textContent="");return this},clone:function(e,t){return e=null!=e&&e,t=null==t?e:t,this.map(function(){return k.clone(this,e,t)})},html:function(e){return z(this,function(e){var t=this[0]||{},n=0,i=this.length;if(void 0===e&&1===t.nodeType)return t.innerHTML;if("string"==typeof e&&!De.test(e)&&!ge[(fe.exec(e)||["",""])[1].toLowerCase()]){e=k.htmlPrefilter(e);try{for(;n<i;n++)1===(t=this[n]||{}).nodeType&&(k.cleanData(ve(t,!1)),t.innerHTML=e);t=0}catch(e){}}t&&this.empty().append(e)},null,e,arguments.length)},replaceWith:function(){var n=[];return He(this,arguments,function(e){var t=this.parentNode;k.inArray(this,n)<0&&(k.cleanData(ve(this)),t&&t.replaceChild(e,this))},n)}}),k.each({appendTo:"append",prependTo:"prepend",insertBefore:"before",insertAfter:"after",replaceAll:"replaceWith"},function(e,s){k.fn[e]=function(e){for(var t,n=[],i=k(e),r=i.length-1,o=0;o<=r;o++)t=o===r?this:this.clone(!0),k(i[o])[s](t),l.apply(n,t.get());return this.pushStack(n)}});function Ie(e,t,n){var i,r,o={};for(r in t)o[r]=e.style[r],e.style[r]=t[r];for(r in i=n.call(e),t)e.style[r]=o[r];return i}var Oe,Re,$e,We,ze,Fe,Be,Xe,Ue=new RegExp("^("+ee+")(?!px)[a-z%]+$","i"),Ve=function(e){var t=e.ownerDocument.defaultView;return t&&t.opener||(t=C),t.getComputedStyle(e)},Ye=new RegExp(ne.join("|"),"i");function Ge(){var e;Xe&&(Be.style.cssText="position:absolute;left:-11111px;width:60px;margin-top:1px;padding:0;border:0",Xe.style.cssText="position:relative;display:block;box-sizing:border-box;overflow:scroll;margin:auto;border:1px;padding:1px;width:60%;top:1%",ie.appendChild(Be).appendChild(Xe),e=C.getComputedStyle(Xe),Oe="1%"!==e.top,Fe=12===Qe(e.marginLeft),Xe.style.right="60%",We=36===Qe(e.right),Re=36===Qe(e.width),Xe.style.position="absolute",$e=12===Qe(Xe.offsetWidth/3),ie.removeChild(Be),Xe=null)}function Qe(e){return Math.round(parseFloat(e))}function Je(e,t,n){var i,r,o,s,a=e.style;return(n=n||Ve(e))&&(""!==(s=n.getPropertyValue(t)||n[t])||re(e)||(s=k.style(e,t)),!y.pixelBoxStyles()&&Ue.test(s)&&Ye.test(t)&&(i=a.width,r=a.minWidth,o=a.maxWidth,a.minWidth=a.maxWidth=a.width=s,s=n.width,a.width=i,a.minWidth=r,a.maxWidth=o)),void 0!==s?s+"":s}function Ze(e,t){return{get:function(){if(!e())return(this.get=t).apply(this,arguments);delete this.get}}}Be=T.createElement("div"),(Xe=T.createElement("div")).style&&(Xe.style.backgroundClip="content-box",Xe.cloneNode(!0).style.backgroundClip="",y.clearCloneStyle="content-box"===Xe.style.backgroundClip,k.extend(y,{boxSizingReliable:function(){return Ge(),Re},pixelBoxStyles:function(){return Ge(),We},pixelPosition:function(){return Ge(),Oe},reliableMarginLeft:function(){return Ge(),Fe},scrollboxSize:function(){return Ge(),$e},reliableTrDimensions:function(){var e,t,n,i;return null==ze&&(e=T.createElement("table"),t=T.createElement("tr"),n=T.createElement("div"),e.style.cssText="position:absolute;left:-11111px",t.style.height="1px",n.style.height="9px",ie.appendChild(e).appendChild(t).appendChild(n),i=C.getComputedStyle(t),ze=3<parseInt(i.height),ie.removeChild(e)),ze}}));var Ke=["Webkit","Moz","ms"],et=T.createElement("div").style,tt={};function nt(e){var t=k.cssProps[e]||tt[e];return t||(e in et?e:tt[e]=function(e){for(var t=e[0].toUpperCase()+e.slice(1),n=Ke.length;n--;)if((e=Ke[n]+t)in et)return e}(e)||e)}var it=/^(none|table(?!-c[ea]).+)/,rt=/^--/,ot={position:"absolute",visibility:"hidden",display:"block"},st={letterSpacing:"0",fontWeight:"400"};function at(e,t,n){var i=te.exec(t);return i?Math.max(0,i[2]-(n||0))+(i[3]||"px"):t}function lt(e,t,n,i,r,o){var s="width"===t?1:0,a=0,l=0;if(n===(i?"border":"content"))return 0;for(;s<4;s+=2)"margin"===n&&(l+=k.css(e,n+ne[s],!0,r)),i?("content"===n&&(l-=k.css(e,"padding"+ne[s],!0,r)),"margin"!==n&&(l-=k.css(e,"border"+ne[s]+"Width",!0,r))):(l+=k.css(e,"padding"+ne[s],!0,r),"padding"!==n?l+=k.css(e,"border"+ne[s]+"Width",!0,r):a+=k.css(e,"border"+ne[s]+"Width",!0,r));return!i&&0<=o&&(l+=Math.max(0,Math.ceil(e["offset"+t[0].toUpperCase()+t.slice(1)]-o-l-a-.5))||0),l}function ct(e,t,n){var i=Ve(e),r=(!y.boxSizingReliable()||n)&&"border-box"===k.css(e,"boxSizing",!1,i),o=r,s=Je(e,t,i),a="offset"+t[0].toUpperCase()+t.slice(1);if(Ue.test(s)){if(!n)return s;s="auto"}return(!y.boxSizingReliable()&&r||!y.reliableTrDimensions()&&A(e,"tr")||"auto"===s||!parseFloat(s)&&"inline"===k.css(e,"display",!1,i))&&e.getClientRects().length&&(r="border-box"===k.css(e,"boxSizing",!1,i),(o=a in e)&&(s=e[a])),(s=parseFloat(s)||0)+lt(e,t,n||(r?"border":"content"),o,i,s)+"px"}function ut(e,t,n,i,r){return new ut.prototype.init(e,t,n,i,r)}k.extend({cssHooks:{opacity:{get:function(e,t){if(t){var n=Je(e,"opacity");return""===n?"1":n}}}},cssNumber:{animationIterationCount:!0,columnCount:!0,fillOpacity:!0,flexGrow:!0,flexShrink:!0,fontWeight:!0,gridArea:!0,gridColumn:!0,gridColumnEnd:!0,gridColumnStart:!0,gridRow:!0,gridRowEnd:!0,gridRowStart:!0,lineHeight:!0,opacity:!0,order:!0,orphans:!0,widows:!0,zIndex:!0,zoom:!0},cssProps:{},style:function(e,t,n,i){if(e&&3!==e.nodeType&&8!==e.nodeType&&e.style){var r,o,s,a=U(t),l=rt.test(t),c=e.style;if(l||(t=nt(a)),s=k.cssHooks[t]||k.cssHooks[a],void 0===n)return s&&"get"in s&&void 0!==(r=s.get(e,!1,i))?r:c[t];"string"===(o=_typeof(n))&&(r=te.exec(n))&&r[1]&&(n=ae(e,t,r),o="number"),null!=n&&n==n&&("number"!==o||l||(n+=r&&r[3]||(k.cssNumber[a]?"":"px")),y.clearCloneStyle||""!==n||0!==t.indexOf("background")||(c[t]="inherit"),s&&"set"in s&&void 0===(n=s.set(e,n,i))||(l?c.setProperty(t,n):c[t]=n))}},css:function(e,t,n,i){var r,o,s,a=U(t);return rt.test(t)||(t=nt(a)),(s=k.cssHooks[t]||k.cssHooks[a])&&"get"in s&&(r=s.get(e,!0,n)),void 0===r&&(r=Je(e,t,i)),"normal"===r&&t in st&&(r=st[t]),""===n||n?(o=parseFloat(r),!0===n||isFinite(o)?o||0:r):r}}),k.each(["height","width"],function(e,l){k.cssHooks[l]={get:function(e,t,n){if(t)return!it.test(k.css(e,"display"))||e.getClientRects().length&&e.getBoundingClientRect().width?ct(e,l,n):Ie(e,ot,function(){return ct(e,l,n)})},set:function(e,t,n){var i,r=Ve(e),o=!y.scrollboxSize()&&"absolute"===r.position,s=(o||n)&&"border-box"===k.css(e,"boxSizing",!1,r),a=n?lt(e,l,n,s,r):0;return s&&o&&(a-=Math.ceil(e["offset"+l[0].toUpperCase()+l.slice(1)]-parseFloat(r[l])-lt(e,l,"border",!1,r)-.5)),a&&(i=te.exec(t))&&"px"!==(i[3]||"px")&&(e.style[l]=t,t=k.css(e,l)),at(0,t,a)}}}),k.cssHooks.marginLeft=Ze(y.reliableMarginLeft,function(e,t){if(t)return(parseFloat(Je(e,"marginLeft"))||e.getBoundingClientRect().left-Ie(e,{marginLeft:0},function(){return e.getBoundingClientRect().left}))+"px"}),k.each({margin:"",padding:"",border:"Width"},function(r,o){k.cssHooks[r+o]={expand:function(e){for(var t=0,n={},i="string"==typeof e?e.split(" "):[e];t<4;t++)n[r+ne[t]+o]=i[t]||i[t-2]||i[0];return n}},"margin"!==r&&(k.cssHooks[r+o].set=at)}),k.fn.extend({css:function(e,t){return z(this,function(e,t,n){var i,r,o={},s=0;if(Array.isArray(t)){for(i=Ve(e),r=t.length;s<r;s++)o[t[s]]=k.css(e,t[s],!1,i);return o}return void 0!==n?k.style(e,t,n):k.css(e,t)},e,t,1<arguments.length)}}),(k.Tween=ut).prototype={constructor:ut,init:function(e,t,n,i,r,o){this.elem=e,this.prop=n,this.easing=r||k.easing._default,this.options=t,this.start=this.now=this.cur(),this.end=i,this.unit=o||(k.cssNumber[n]?"":"px")},cur:function(){var e=ut.propHooks[this.prop];return e&&e.get?e.get(this):ut.propHooks._default.get(this)},run:function(e){var t,n=ut.propHooks[this.prop];return this.options.duration?this.pos=t=k.easing[this.easing](e,this.options.duration*e,0,1,this.options.duration):this.pos=t=e,this.now=(this.end-this.start)*t+this.start,this.options.step&&this.options.step.call(this.elem,this.now,this),n&&n.set?n.set(this):ut.propHooks._default.set(this),this}},ut.prototype.init.prototype=ut.prototype,ut.propHooks={_default:{get:function(e){var t;return 1!==e.elem.nodeType||null!=e.elem[e.prop]&&null==e.elem.style[e.prop]?e.elem[e.prop]:(t=k.css(e.elem,e.prop,""))&&"auto"!==t?t:0},set:function(e){k.fx.step[e.prop]?k.fx.step[e.prop](e):1!==e.elem.nodeType||!k.cssHooks[e.prop]&&null==e.elem.style[nt(e.prop)]?e.elem[e.prop]=e.now:k.style(e.elem,e.prop,e.now+e.unit)}}},ut.propHooks.scrollTop=ut.propHooks.scrollLeft={set:function(e){e.elem.nodeType&&e.elem.parentNode&&(e.elem[e.prop]=e.now)}},k.easing={linear:function(e){return e},swing:function(e){return.5-Math.cos(e*Math.PI)/2},_default:"swing"},k.fx=ut.prototype.init,k.fx.step={};var dt,pt,ft,ht,gt=/^(?:toggle|show|hide)$/,vt=/queueHooks$/;function mt(){pt&&(!1===T.hidden&&C.requestAnimationFrame?C.requestAnimationFrame(mt):C.setTimeout(mt,k.fx.interval),k.fx.tick())}function yt(){return C.setTimeout(function(){dt=void 0}),dt=Date.now()}function xt(e,t){var n,i=0,r={height:e};for(t=t?1:0;i<4;i+=2-t)r["margin"+(n=ne[i])]=r["padding"+n]=e;return t&&(r.opacity=r.width=e),r}function bt(e,t,n){for(var i,r=(wt.tweeners[t]||[]).concat(wt.tweeners["*"]),o=0,s=r.length;o<s;o++)if(i=r[o].call(n,t,e))return i}function wt(o,e,t){var n,s,i=0,r=wt.prefilters.length,a=k.Deferred().always(function(){delete l.elem}),l=function(){if(s)return!1;for(var e=dt||yt(),t=Math.max(0,c.startTime+c.duration-e),n=1-(t/c.duration||0),i=0,r=c.tweens.length;i<r;i++)c.tweens[i].run(n);return a.notifyWith(o,[c,n,t]),n<1&&r?t:(r||a.notifyWith(o,[c,1,0]),a.resolveWith(o,[c]),!1)},c=a.promise({elem:o,props:k.extend({},e),opts:k.extend(!0,{specialEasing:{},easing:k.easing._default},t),originalProperties:e,originalOptions:t,startTime:dt||yt(),duration:t.duration,tweens:[],createTween:function(e,t){var n=k.Tween(o,c.opts,e,t,c.opts.specialEasing[e]||c.opts.easing);return c.tweens.push(n),n},stop:function(e){var t=0,n=e?c.tweens.length:0;if(s)return this;for(s=!0;t<n;t++)c.tweens[t].run(1);return e?(a.notifyWith(o,[c,1,0]),a.resolveWith(o,[c,e])):a.rejectWith(o,[c,e]),this}}),u=c.props;for(!function(e,t){var n,i,r,o,s;for(n in e)if(r=t[i=U(n)],o=e[n],Array.isArray(o)&&(r=o[1],o=e[n]=o[0]),n!==i&&(e[i]=o,delete e[n]),(s=k.cssHooks[i])&&"expand"in s)for(n in o=s.expand(o),delete e[i],o)n in e||(e[n]=o[n],t[n]=r);else t[i]=r}(u,c.opts.specialEasing);i<r;i++)if(n=wt.prefilters[i].call(c,o,u,c.opts))return x(n.stop)&&(k._queueHooks(c.elem,c.opts.queue).stop=n.stop.bind(n)),n;return k.map(u,bt,c),x(c.opts.start)&&c.opts.start.call(o,c),c.progress(c.opts.progress).done(c.opts.done,c.opts.complete).fail(c.opts.fail).always(c.opts.always),k.fx.timer(k.extend(l,{elem:o,anim:c,queue:c.opts.queue})),c}k.Animation=k.extend(wt,{tweeners:{"*":[function(e,t){var n=this.createTween(e,t);return ae(n.elem,e,te.exec(t),n),n}]},tweener:function(e,t){for(var n,i=0,r=(e=x(e)?(t=e,["*"]):e.match(H)).length;i<r;i++)n=e[i],wt.tweeners[n]=wt.tweeners[n]||[],wt.tweeners[n].unshift(t)},prefilters:[function(e,t,n){var i,r,o,s,a,l,c,u,d="width"in t||"height"in t,p=this,f={},h=e.style,g=e.nodeType&&se(e),v=G.get(e,"fxshow");for(i in n.queue||(null==(s=k._queueHooks(e,"fx")).unqueued&&(s.unqueued=0,a=s.empty.fire,s.empty.fire=function(){s.unqueued||a()}),s.unqueued++,p.always(function(){p.always(function(){s.unqueued--,k.queue(e,"fx").length||s.empty.fire()})})),t)if(r=t[i],gt.test(r)){if(delete t[i],o=o||"toggle"===r,r===(g?"hide":"show")){if("show"!==r||!v||void 0===v[i])continue;g=!0}f[i]=v&&v[i]||k.style(e,i)}if((l=!k.isEmptyObject(t))||!k.isEmptyObject(f))for(i in d&&1===e.nodeType&&(n.overflow=[h.overflow,h.overflowX,h.overflowY],null==(c=v&&v.display)&&(c=G.get(e,"display")),"none"===(u=k.css(e,"display"))&&(c?u=c:(ce([e],!0),c=e.style.display||c,u=k.css(e,"display"),ce([e]))),("inline"===u||"inline-block"===u&&null!=c)&&"none"===k.css(e,"float")&&(l||(p.done(function(){h.display=c}),null==c&&(u=h.display,c="none"===u?"":u)),h.display="inline-block")),n.overflow&&(h.overflow="hidden",p.always(function(){h.overflow=n.overflow[0],h.overflowX=n.overflow[1],h.overflowY=n.overflow[2]})),l=!1,f)l||(v?"hidden"in v&&(g=v.hidden):v=G.access(e,"fxshow",{display:c}),o&&(v.hidden=!g),g&&ce([e],!0),p.done(function(){for(i in g||ce([e]),G.remove(e,"fxshow"),f)k.style(e,i,f[i])})),l=bt(g?v[i]:0,i,p),i in v||(v[i]=l.start,g&&(l.end=l.start,l.start=0))}],prefilter:function(e,t){t?wt.prefilters.unshift(e):wt.prefilters.push(e)}}),k.speed=function(e,t,n){var i=e&&"object"===_typeof(e)?k.extend({},e):{complete:n||!n&&t||x(e)&&e,duration:e,easing:n&&t||t&&!x(t)&&t};return k.fx.off?i.duration=0:"number"!=typeof i.duration&&(i.duration in k.fx.speeds?i.duration=k.fx.speeds[i.duration]:i.duration=k.fx.speeds._default),null!=i.queue&&!0!==i.queue||(i.queue="fx"),i.old=i.complete,i.complete=function(){x(i.old)&&i.old.call(this),i.queue&&k.dequeue(this,i.queue)},i},k.fn.extend({fadeTo:function(e,t,n,i){return this.filter(se).css("opacity",0).show().end().animate({opacity:t},e,n,i)},animate:function(t,e,n,i){function r(){var e=wt(this,k.extend({},t),s);(o||G.get(this,"finish"))&&e.stop(!0)}var o=k.isEmptyObject(t),s=k.speed(e,n,i);return r.finish=r,o||!1===s.queue?this.each(r):this.queue(s.queue,r)},stop:function(r,e,o){function s(e){var t=e.stop;delete e.stop,t(o)}return"string"!=typeof r&&(o=e,e=r,r=void 0),e&&this.queue(r||"fx",[]),this.each(function(){var e=!0,t=null!=r&&r+"queueHooks",n=k.timers,i=G.get(this);if(t)i[t]&&i[t].stop&&s(i[t]);else for(t in i)i[t]&&i[t].stop&&vt.test(t)&&s(i[t]);for(t=n.length;t--;)n[t].elem!==this||null!=r&&n[t].queue!==r||(n[t].anim.stop(o),e=!1,n.splice(t,1));!e&&o||k.dequeue(this,r)})},finish:function(s){return!1!==s&&(s=s||"fx"),this.each(function(){var e,t=G.get(this),n=t[s+"queue"],i=t[s+"queueHooks"],r=k.timers,o=n?n.length:0;for(t.finish=!0,k.queue(this,s,[]),i&&i.stop&&i.stop.call(this,!0),e=r.length;e--;)r[e].elem===this&&r[e].queue===s&&(r[e].anim.stop(!0),r.splice(e,1));for(e=0;e<o;e++)n[e]&&n[e].finish&&n[e].finish.call(this);delete t.finish})}}),k.each(["toggle","show","hide"],function(e,i){var r=k.fn[i];k.fn[i]=function(e,t,n){return null==e||"boolean"==typeof e?r.apply(this,arguments):this.animate(xt(i,!0),e,t,n)}}),k.each({slideDown:xt("show"),slideUp:xt("hide"),slideToggle:xt("toggle"),fadeIn:{opacity:"show"},fadeOut:{opacity:"hide"},fadeToggle:{opacity:"toggle"}},function(e,i){k.fn[e]=function(e,t,n){return this.animate(i,e,t,n)}}),k.timers=[],k.fx.tick=function(){var e,t=0,n=k.timers;for(dt=Date.now();t<n.length;t++)(e=n[t])()||n[t]!==e||n.splice(t--,1);n.length||k.fx.stop(),dt=void 0},k.fx.timer=function(e){k.timers.push(e),k.fx.start()},k.fx.interval=13,k.fx.start=function(){pt||(pt=!0,mt())},k.fx.stop=function(){pt=null},k.fx.speeds={slow:600,fast:200,_default:400},k.fn.delay=function(i,e){return i=k.fx&&k.fx.speeds[i]||i,e=e||"fx",this.queue(e,function(e,t){var n=C.setTimeout(e,i);t.stop=function(){C.clearTimeout(n)}})},ft=T.createElement("input"),ht=T.createElement("select").appendChild(T.createElement("option")),ft.type="checkbox",y.checkOn=""!==ft.value,y.optSelected=ht.selected,(ft=T.createElement("input")).value="t",ft.type="radio",y.radioValue="t"===ft.value;var St,Ct=k.expr.attrHandle;k.fn.extend({attr:function(e,t){return z(this,k.attr,e,t,1<arguments.length)},removeAttr:function(e){return this.each(function(){k.removeAttr(this,e)})}}),k.extend({attr:function(e,t,n){var i,r,o=e.nodeType;if(3!==o&&8!==o&&2!==o)return void 0===e.getAttribute?k.prop(e,t,n):(1===o&&k.isXMLDoc(e)||(r=k.attrHooks[t.toLowerCase()]||(k.expr.match.bool.test(t)?St:void 0)),void 0!==n?null===n?void k.removeAttr(e,t):r&&"set"in r&&void 0!==(i=r.set(e,n,t))?i:(e.setAttribute(t,n+""),n):!(r&&"get"in r&&null!==(i=r.get(e,t)))&&null==(i=k.find.attr(e,t))?void 0:i)},attrHooks:{type:{set:function(e,t){if(!y.radioValue&&"radio"===t&&A(e,"input")){var n=e.value;return e.setAttribute("type",t),n&&(e.value=n),t}}}},removeAttr:function(e,t){var n,i=0,r=t&&t.match(H);if(r&&1===e.nodeType)for(;n=r[i++];)e.removeAttribute(n)}}),St={set:function(e,t,n){return!1===t?k.removeAttr(e,n):e.setAttribute(n,n),n}},k.each(k.expr.match.bool.source.match(/\w+/g),function(e,t){var s=Ct[t]||k.find.attr;Ct[t]=function(e,t,n){var i,r,o=t.toLowerCase();return n||(r=Ct[o],Ct[o]=i,i=null!=s(e,t,n)?o:null,Ct[o]=r),i}});var Tt=/^(?:input|select|textarea|button)$/i,kt=/^(?:a|area)$/i;function Et(e){return(e.match(H)||[]).join(" ")}function At(e){return e.getAttribute&&e.getAttribute("class")||""}function Dt(e){return Array.isArray(e)?e:"string"==typeof e&&e.match(H)||[]}k.fn.extend({prop:function(e,t){return z(this,k.prop,e,t,1<arguments.length)},removeProp:function(e){return this.each(function(){delete this[k.propFix[e]||e]})}}),k.extend({prop:function(e,t,n){var i,r,o=e.nodeType;if(3!==o&&8!==o&&2!==o)return 1===o&&k.isXMLDoc(e)||(t=k.propFix[t]||t,r=k.propHooks[t]),void 0!==n?r&&"set"in r&&void 0!==(i=r.set(e,n,t))?i:e[t]=n:r&&"get"in r&&null!==(i=r.get(e,t))?i:e[t]},propHooks:{tabIndex:{get:function(e){var t=k.find.attr(e,"tabindex");return t?parseInt(t,10):Tt.test(e.nodeName)||kt.test(e.nodeName)&&e.href?0:-1}}},propFix:{for:"htmlFor",class:"className"}}),y.optSelected||(k.propHooks.selected={get:function(e){var t=e.parentNode;return t&&t.parentNode&&t.parentNode.selectedIndex,null},set:function(e){var t=e.parentNode;t&&(t.selectedIndex,t.parentNode&&t.parentNode.selectedIndex)}}),k.each(["tabIndex","readOnly","maxLength","cellSpacing","cellPadding","rowSpan","colSpan","useMap","frameBorder","contentEditable"],function(){k.propFix[this.toLowerCase()]=this}),k.fn.extend({addClass:function(t){var e,n,i,r,o,s,a,l=0;if(x(t))return this.each(function(e){k(this).addClass(t.call(this,e,At(this)))});if((e=Dt(t)).length)for(;n=this[l++];)if(r=At(n),i=1===n.nodeType&&" "+Et(r)+" "){for(s=0;o=e[s++];)i.indexOf(" "+o+" ")<0&&(i+=o+" ");r!==(a=Et(i))&&n.setAttribute("class",a)}return this},removeClass:function(t){var e,n,i,r,o,s,a,l=0;if(x(t))return this.each(function(e){k(this).removeClass(t.call(this,e,At(this)))});if(!arguments.length)return this.attr("class","");if((e=Dt(t)).length)for(;n=this[l++];)if(r=At(n),i=1===n.nodeType&&" "+Et(r)+" "){for(s=0;o=e[s++];)for(;-1<i.indexOf(" "+o+" ");)i=i.replace(" "+o+" "," ");r!==(a=Et(i))&&n.setAttribute("class",a)}return this},toggleClass:function(r,t){var o=_typeof(r),s="string"===o||Array.isArray(r);return"boolean"==typeof t&&s?t?this.addClass(r):this.removeClass(r):x(r)?this.each(function(e){k(this).toggleClass(r.call(this,e,At(this),t),t)}):this.each(function(){var e,t,n,i;if(s)for(t=0,n=k(this),i=Dt(r);e=i[t++];)n.hasClass(e)?n.removeClass(e):n.addClass(e);else void 0!==r&&"boolean"!==o||((e=At(this))&&G.set(this,"__className__",e),this.setAttribute&&this.setAttribute("class",!e&&!1!==r&&G.get(this,"__className__")||""))})},hasClass:function(e){for(var t,n=0,i=" "+e+" ";t=this[n++];)if(1===t.nodeType&&-1<(" "+Et(At(t))+" ").indexOf(i))return!0;return!1}});var Nt=/\r/g;k.fn.extend({val:function(n){var i,e,r,t=this[0];return arguments.length?(r=x(n),this.each(function(e){var t;1===this.nodeType&&(null==(t=r?n.call(this,e,k(this).val()):n)?t="":"number"==typeof t?t+="":Array.isArray(t)&&(t=k.map(t,function(e){return null==e?"":e+""})),(i=k.valHooks[this.type]||k.valHooks[this.nodeName.toLowerCase()])&&"set"in i&&void 0!==i.set(this,t,"value")||(this.value=t))})):t?(i=k.valHooks[t.type]||k.valHooks[t.nodeName.toLowerCase()])&&"get"in i&&void 0!==(e=i.get(t,"value"))?e:"string"==typeof(e=t.value)?e.replace(Nt,""):null==e?"":e:void 0}}),k.extend({valHooks:{option:{get:function(e){var t=k.find.attr(e,"value");return null!=t?t:Et(k.text(e))}},select:{get:function(e){for(var t,n,i=e.options,r=e.selectedIndex,o="select-one"===e.type,s=o?null:[],a=o?r+1:i.length,l=r<0?a:o?r:0;l<a;l++)if(((n=i[l]).selected||l===r)&&!n.disabled&&(!n.parentNode.disabled||!A(n.parentNode,"optgroup"))){if(t=k(n).val(),o)return t;s.push(t)}return s},set:function(e,t){for(var n,i,r=e.options,o=k.makeArray(t),s=r.length;s--;)((i=r[s]).selected=-1<k.inArray(k.valHooks.option.get(i),o))&&(n=!0);return n||(e.selectedIndex=-1),o}}}}),k.each(["radio","checkbox"],function(){k.valHooks[this]={set:function(e,t){if(Array.isArray(t))return e.checked=-1<k.inArray(k(e).val(),t)}},y.checkOn||(k.valHooks[this].get=function(e){return null===e.getAttribute("value")?"on":e.value})}),y.focusin="onfocusin"in C;function Lt(e){e.stopPropagation()}var qt=/^(?:focusinfocus|focusoutblur)$/;k.extend(k.event,{trigger:function(e,t,n,i){var r,o,s,a,l,c,u,d=[n||T],p=m.call(e,"type")?e.type:e,f=m.call(e,"namespace")?e.namespace.split("."):[],h=u=o=n=n||T;if(3!==n.nodeType&&8!==n.nodeType&&!qt.test(p+k.event.triggered)&&(-1<p.indexOf(".")&&(p=(f=p.split(".")).shift(),f.sort()),a=p.indexOf(":")<0&&"on"+p,(e=e[k.expando]?e:new k.Event(p,"object"===_typeof(e)&&e)).isTrigger=i?2:3,e.namespace=f.join("."),e.rnamespace=e.namespace?new RegExp("(^|\\.)"+f.join("\\.(?:.*\\.|)")+"(\\.|$)"):null,e.result=void 0,e.target||(e.target=n),t=null==t?[e]:k.makeArray(t,[e]),c=k.event.special[p]||{},i||!c.trigger||!1!==c.trigger.apply(n,t))){if(!i&&!c.noBubble&&!g(n)){for(s=c.delegateType||p,qt.test(s+p)||(h=h.parentNode);h;h=h.parentNode)d.push(h),o=h;o===(n.ownerDocument||T)&&d.push(o.defaultView||o.parentWindow||C)}for(r=0;(h=d[r++])&&!e.isPropagationStopped();)u=h,e.type=1<r?s:c.bindType||p,(l=(G.get(h,"events")||Object.create(null))[e.type]&&G.get(h,"handle"))&&l.apply(h,t),(l=a&&h[a])&&l.apply&&V(h)&&(e.result=l.apply(h,t),!1===e.result&&e.preventDefault());return e.type=p,i||e.isDefaultPrevented()||c._default&&!1!==c._default.apply(d.pop(),t)||!V(n)||a&&x(n[p])&&!g(n)&&((o=n[a])&&(n[a]=null),k.event.triggered=p,e.isPropagationStopped()&&u.addEventListener(p,Lt),n[p](),e.isPropagationStopped()&&u.removeEventListener(p,Lt),k.event.triggered=void 0,o&&(n[a]=o)),e.result}},simulate:function(e,t,n){var i=k.extend(new k.Event,n,{type:e,isSimulated:!0});k.event.trigger(i,null,t)}}),k.fn.extend({trigger:function(e,t){return this.each(function(){k.event.trigger(e,t,this)})},triggerHandler:function(e,t){var n=this[0];if(n)return k.event.trigger(e,t,n,!0)}}),y.focusin||k.each({focus:"focusin",blur:"focusout"},function(n,i){function r(e){k.event.simulate(i,e.target,k.event.fix(e))}k.event.special[i]={setup:function(){var e=this.ownerDocument||this.document||this,t=G.access(e,i);t||e.addEventListener(n,r,!0),G.access(e,i,(t||0)+1)},teardown:function(){var e=this.ownerDocument||this.document||this,t=G.access(e,i)-1;t?G.access(e,i,t):(e.removeEventListener(n,r,!0),G.remove(e,i))}}});var jt=C.location,Pt={guid:Date.now()},Mt=/\?/;k.parseXML=function(e){var t;if(!e||"string"!=typeof e)return null;try{t=(new C.DOMParser).parseFromString(e,"text/xml")}catch(e){t=void 0}return t&&!t.getElementsByTagName("parsererror").length||k.error("Invalid XML: "+e),t};var Ht=/\[\]$/,_t=/\r?\n/g,It=/^(?:submit|button|image|reset|file)$/i,Ot=/^(?:input|select|textarea|keygen)/i;k.param=function(e,t){function n(e,t){var n=x(t)?t():t;r[r.length]=encodeURIComponent(e)+"="+encodeURIComponent(null==n?"":n)}var i,r=[];if(null==e)return"";if(Array.isArray(e)||e.jquery&&!k.isPlainObject(e))k.each(e,function(){n(this.name,this.value)});else for(i in e)!function n(i,e,r,o){var t;if(Array.isArray(e))k.each(e,function(e,t){r||Ht.test(i)?o(i,t):n(i+"["+("object"===_typeof(t)&&null!=t?e:"")+"]",t,r,o)});else if(r||"object"!==w(e))o(i,e);else for(t in e)n(i+"["+t+"]",e[t],r,o)}(i,e[i],t,n);return r.join("&")},k.fn.extend({serialize:function(){return k.param(this.serializeArray())},serializeArray:function(){return this.map(function(){var e=k.prop(this,"elements");return e?k.makeArray(e):this}).filter(function(){var e=this.type;return this.name&&!k(this).is(":disabled")&&Ot.test(this.nodeName)&&!It.test(e)&&(this.checked||!pe.test(e))}).map(function(e,t){var n=k(this).val();return null==n?null:Array.isArray(n)?k.map(n,function(e){return{name:t.name,value:e.replace(_t,"\r\n")}}):{name:t.name,value:n.replace(_t,"\r\n")}}).get()}});var Rt=/%20/g,$t=/#.*$/,Wt=/([?&])_=[^&]*/,zt=/^(.*?):[ \t]*([^\r\n]*)$/gm,Ft=/^(?:GET|HEAD)$/,Bt=/^\/\//,Xt={},Ut={},Vt="*/".concat("*"),Yt=T.createElement("a");function Gt(o){return function(e,t){"string"!=typeof e&&(t=e,e="*");var n,i=0,r=e.toLowerCase().match(H)||[];if(x(t))for(;n=r[i++];)"+"===n[0]?(n=n.slice(1)||"*",(o[n]=o[n]||[]).unshift(t)):(o[n]=o[n]||[]).push(t)}}function Qt(t,r,o,s){var a={},l=t===Ut;function c(e){var i;return a[e]=!0,k.each(t[e]||[],function(e,t){var n=t(r,o,s);return"string"!=typeof n||l||a[n]?l?!(i=n):void 0:(r.dataTypes.unshift(n),c(n),!1)}),i}return c(r.dataTypes[0])||!a["*"]&&c("*")}function Jt(e,t){var n,i,r=k.ajaxSettings.flatOptions||{};for(n in t)void 0!==t[n]&&((r[n]?e:i=i||{})[n]=t[n]);return i&&k.extend(!0,e,i),e}Yt.href=jt.href,k.extend({active:0,lastModified:{},etag:{},ajaxSettings:{url:jt.href,type:"GET",isLocal:/^(?:about|app|app-storage|.+-extension|file|res|widget):$/.test(jt.protocol),global:!0,processData:!0,async:!0,contentType:"application/x-www-form-urlencoded; charset=UTF-8",accepts:{"*":Vt,text:"text/plain",html:"text/html",xml:"application/xml, text/xml",json:"application/json, text/javascript"},contents:{xml:/\bxml\b/,html:/\bhtml/,json:/\bjson\b/},responseFields:{xml:"responseXML",text:"responseText",json:"responseJSON"},converters:{"* text":String,"text html":!0,"text json":JSON.parse,"text xml":k.parseXML},flatOptions:{url:!0,context:!0}},ajaxSetup:function(e,t){return t?Jt(Jt(e,k.ajaxSettings),t):Jt(k.ajaxSettings,e)},ajaxPrefilter:Gt(Xt),ajaxTransport:Gt(Ut),ajax:function(e,t){"object"===_typeof(e)&&(t=e,e=void 0),t=t||{};var u,d,p,n,f,i,h,g,r,o,v=k.ajaxSetup({},t),m=v.context||v,y=v.context&&(m.nodeType||m.jquery)?k(m):k.event,x=k.Deferred(),b=k.Callbacks("once memory"),w=v.statusCode||{},s={},a={},l="canceled",S={readyState:0,getResponseHeader:function(e){var t;if(h){if(!n)for(n={};t=zt.exec(p);)n[t[1].toLowerCase()+" "]=(n[t[1].toLowerCase()+" "]||[]).concat(t[2]);t=n[e.toLowerCase()+" "]}return null==t?null:t.join(", ")},getAllResponseHeaders:function(){return h?p:null},setRequestHeader:function(e,t){return null==h&&(e=a[e.toLowerCase()]=a[e.toLowerCase()]||e,s[e]=t),this},overrideMimeType:function(e){return null==h&&(v.mimeType=e),this},statusCode:function(e){var t;if(e)if(h)S.always(e[S.status]);else for(t in e)w[t]=[w[t],e[t]];return this},abort:function(e){var t=e||l;return u&&u.abort(t),c(0,t),this}};if(x.promise(S),v.url=((e||v.url||jt.href)+"").replace(Bt,jt.protocol+"//"),v.type=t.method||t.type||v.method||v.type,v.dataTypes=(v.dataType||"*").toLowerCase().match(H)||[""],null==v.crossDomain){i=T.createElement("a");try{i.href=v.url,i.href=i.href,v.crossDomain=Yt.protocol+"//"+Yt.host!=i.protocol+"//"+i.host}catch(e){v.crossDomain=!0}}if(v.data&&v.processData&&"string"!=typeof v.data&&(v.data=k.param(v.data,v.traditional)),Qt(Xt,v,t,S),h)return S;for(r in(g=k.event&&v.global)&&0==k.active++&&k.event.trigger("ajaxStart"),v.type=v.type.toUpperCase(),v.hasContent=!Ft.test(v.type),d=v.url.replace($t,""),v.hasContent?v.data&&v.processData&&0===(v.contentType||"").indexOf("application/x-www-form-urlencoded")&&(v.data=v.data.replace(Rt,"+")):(o=v.url.slice(d.length),v.data&&(v.processData||"string"==typeof v.data)&&(d+=(Mt.test(d)?"&":"?")+v.data,delete v.data),!1===v.cache&&(d=d.replace(Wt,"$1"),o=(Mt.test(d)?"&":"?")+"_="+Pt.guid+++o),v.url=d+o),v.ifModified&&(k.lastModified[d]&&S.setRequestHeader("If-Modified-Since",k.lastModified[d]),k.etag[d]&&S.setRequestHeader("If-None-Match",k.etag[d])),(v.data&&v.hasContent&&!1!==v.contentType||t.contentType)&&S.setRequestHeader("Content-Type",v.contentType),S.setRequestHeader("Accept",v.dataTypes[0]&&v.accepts[v.dataTypes[0]]?v.accepts[v.dataTypes[0]]+("*"!==v.dataTypes[0]?", "+Vt+"; q=0.01":""):v.accepts["*"]),v.headers)S.setRequestHeader(r,v.headers[r]);if(v.beforeSend&&(!1===v.beforeSend.call(m,S,v)||h))return S.abort();if(l="abort",b.add(v.complete),S.done(v.success),S.fail(v.error),u=Qt(Ut,v,t,S)){if(S.readyState=1,g&&y.trigger("ajaxSend",[S,v]),h)return S;v.async&&0<v.timeout&&(f=C.setTimeout(function(){S.abort("timeout")},v.timeout));try{h=!1,u.send(s,c)}catch(e){if(h)throw e;c(-1,e)}}else c(-1,"No Transport");function c(e,t,n,i){var r,o,s,a,l,c=t;h||(h=!0,f&&C.clearTimeout(f),u=void 0,p=i||"",S.readyState=0<e?4:0,r=200<=e&&e<300||304===e,n&&(a=function(e,t,n){for(var i,r,o,s,a=e.contents,l=e.dataTypes;"*"===l[0];)l.shift(),void 0===i&&(i=e.mimeType||t.getResponseHeader("Content-Type"));if(i)for(r in a)if(a[r]&&a[r].test(i)){l.unshift(r);break}if(l[0]in n)o=l[0];else{for(r in n){if(!l[0]||e.converters[r+" "+l[0]]){o=r;break}s=s||r}o=o||s}if(o)return o!==l[0]&&l.unshift(o),n[o]}(v,S,n)),!r&&-1<k.inArray("script",v.dataTypes)&&(v.converters["text script"]=function(){}),a=function(e,t,n,i){var r,o,s,a,l,c={},u=e.dataTypes.slice();if(u[1])for(s in e.converters)c[s.toLowerCase()]=e.converters[s];for(o=u.shift();o;)if(e.responseFields[o]&&(n[e.responseFields[o]]=t),!l&&i&&e.dataFilter&&(t=e.dataFilter(t,e.dataType)),l=o,o=u.shift())if("*"===o)o=l;else if("*"!==l&&l!==o){if(!(s=c[l+" "+o]||c["* "+o]))for(r in c)if((a=r.split(" "))[1]===o&&(s=c[l+" "+a[0]]||c["* "+a[0]])){!0===s?s=c[r]:!0!==c[r]&&(o=a[0],u.unshift(a[1]));break}if(!0!==s)if(s&&e.throws)t=s(t);else try{t=s(t)}catch(e){return{state:"parsererror",error:s?e:"No conversion from "+l+" to "+o}}}return{state:"success",data:t}}(v,a,S,r),r?(v.ifModified&&((l=S.getResponseHeader("Last-Modified"))&&(k.lastModified[d]=l),(l=S.getResponseHeader("etag"))&&(k.etag[d]=l)),204===e||"HEAD"===v.type?c="nocontent":304===e?c="notmodified":(c=a.state,o=a.data,r=!(s=a.error))):(s=c,!e&&c||(c="error",e<0&&(e=0))),S.status=e,S.statusText=(t||c)+"",r?x.resolveWith(m,[o,c,S]):x.rejectWith(m,[S,c,s]),S.statusCode(w),w=void 0,g&&y.trigger(r?"ajaxSuccess":"ajaxError",[S,v,r?o:s]),b.fireWith(m,[S,c]),g&&(y.trigger("ajaxComplete",[S,v]),--k.active||k.event.trigger("ajaxStop")))}return S},getJSON:function(e,t,n){return k.get(e,t,n,"json")},getScript:function(e,t){return k.get(e,void 0,t,"script")}}),k.each(["get","post"],function(e,r){k[r]=function(e,t,n,i){return x(t)&&(i=i||n,n=t,t=void 0),k.ajax(k.extend({url:e,type:r,dataType:i,data:t,success:n},k.isPlainObject(e)&&e))}}),k.ajaxPrefilter(function(e){var t;for(t in e.headers)"content-type"===t.toLowerCase()&&(e.contentType=e.headers[t]||"")}),k._evalUrl=function(e,t,n){return k.ajax({url:e,type:"GET",dataType:"script",cache:!0,async:!1,global:!1,converters:{"text script":function(){}},dataFilter:function(e){k.globalEval(e,t,n)}})},k.fn.extend({wrapAll:function(e){var t;return this[0]&&(x(e)&&(e=e.call(this[0])),t=k(e,this[0].ownerDocument).eq(0).clone(!0),this[0].parentNode&&t.insertBefore(this[0]),t.map(function(){for(var e=this;e.firstElementChild;)e=e.firstElementChild;return e}).append(this)),this},wrapInner:function(n){return x(n)?this.each(function(e){k(this).wrapInner(n.call(this,e))}):this.each(function(){var e=k(this),t=e.contents();t.length?t.wrapAll(n):e.append(n)})},wrap:function(t){var n=x(t);return this.each(function(e){k(this).wrapAll(n?t.call(this,e):t)})},unwrap:function(e){return this.parent(e).not("body").each(function(){k(this).replaceWith(this.childNodes)}),this}}),k.expr.pseudos.hidden=function(e){return!k.expr.pseudos.visible(e)},k.expr.pseudos.visible=function(e){return!!(e.offsetWidth||e.offsetHeight||e.getClientRects().length)},k.ajaxSettings.xhr=function(){try{return new C.XMLHttpRequest}catch(e){}};var Zt={0:200,1223:204},Kt=k.ajaxSettings.xhr();y.cors=!!Kt&&"withCredentials"in Kt,y.ajax=Kt=!!Kt,k.ajaxTransport(function(r){var o,s;if(y.cors||Kt&&!r.crossDomain)return{send:function(e,t){var n,i=r.xhr();if(i.open(r.type,r.url,r.async,r.username,r.password),r.xhrFields)for(n in r.xhrFields)i[n]=r.xhrFields[n];for(n in r.mimeType&&i.overrideMimeType&&i.overrideMimeType(r.mimeType),r.crossDomain||e["X-Requested-With"]||(e["X-Requested-With"]="XMLHttpRequest"),e)i.setRequestHeader(n,e[n]);o=function(e){return function(){o&&(o=s=i.onload=i.onerror=i.onabort=i.ontimeout=i.onreadystatechange=null,"abort"===e?i.abort():"error"===e?"number"!=typeof i.status?t(0,"error"):t(i.status,i.statusText):t(Zt[i.status]||i.status,i.statusText,"text"!==(i.responseType||"text")||"string"!=typeof i.responseText?{binary:i.response}:{text:i.responseText},i.getAllResponseHeaders()))}},i.onload=o(),s=i.onerror=i.ontimeout=o("error"),void 0!==i.onabort?i.onabort=s:i.onreadystatechange=function(){4===i.readyState&&C.setTimeout(function(){o&&s()})},o=o("abort");try{i.send(r.hasContent&&r.data||null)}catch(e){if(o)throw e}},abort:function(){o&&o()}}}),k.ajaxPrefilter(function(e){e.crossDomain&&(e.contents.script=!1)}),k.ajaxSetup({accepts:{script:"text/javascript, application/javascript, application/ecmascript, application/x-ecmascript"},contents:{script:/\b(?:java|ecma)script\b/},converters:{"text script":function(e){return k.globalEval(e),e}}}),k.ajaxPrefilter("script",function(e){void 0===e.cache&&(e.cache=!1),e.crossDomain&&(e.type="GET")}),k.ajaxTransport("script",function(n){var i,r;if(n.crossDomain||n.scriptAttrs)return{send:function(e,t){i=k("<script>").attr(n.scriptAttrs||{}).prop({charset:n.scriptCharset,src:n.url}).on("load error",r=function(e){i.remove(),r=null,e&&t("error"===e.type?404:200,e.type)}),T.head.appendChild(i[0])},abort:function(){r&&r()}}});var en,tn=[],nn=/(=)\?(?=&|$)|\?\?/;k.ajaxSetup({jsonp:"callback",jsonpCallback:function(){var e=tn.pop()||k.expando+"_"+Pt.guid++;return this[e]=!0,e}}),k.ajaxPrefilter("json jsonp",function(e,t,n){var i,r,o,s=!1!==e.jsonp&&(nn.test(e.url)?"url":"string"==typeof e.data&&0===(e.contentType||"").indexOf("application/x-www-form-urlencoded")&&nn.test(e.data)&&"data");if(s||"jsonp"===e.dataTypes[0])return i=e.jsonpCallback=x(e.jsonpCallback)?e.jsonpCallback():e.jsonpCallback,s?e[s]=e[s].replace(nn,"$1"+i):!1!==e.jsonp&&(e.url+=(Mt.test(e.url)?"&":"?")+e.jsonp+"="+i),e.converters["script json"]=function(){return o||k.error(i+" was not called"),o[0]},e.dataTypes[0]="json",r=C[i],C[i]=function(){o=arguments},n.always(function(){void 0===r?k(C).removeProp(i):C[i]=r,e[i]&&(e.jsonpCallback=t.jsonpCallback,tn.push(i)),o&&x(r)&&r(o[0]),o=r=void 0}),"script"}),y.createHTMLDocument=((en=T.implementation.createHTMLDocument("").body).innerHTML="<form></form><form></form>",2===en.childNodes.length),k.parseHTML=function(e,t,n){return"string"!=typeof e?[]:("boolean"==typeof t&&(n=t,t=!1),t||(y.createHTMLDocument?((i=(t=T.implementation.createHTMLDocument("")).createElement("base")).href=T.location.href,t.head.appendChild(i)):t=T),o=!n&&[],(r=D.exec(e))?[t.createElement(r[1])]:(r=xe([e],t,o),o&&o.length&&k(o).remove(),k.merge([],r.childNodes)));var i,r,o},k.fn.load=function(e,t,n){var i,r,o,s=this,a=e.indexOf(" ");return-1<a&&(i=Et(e.slice(a)),e=e.slice(0,a)),x(t)?(n=t,t=void 0):t&&"object"===_typeof(t)&&(r="POST"),0<s.length&&k.ajax({url:e,type:r||"GET",dataType:"html",data:t}).done(function(e){o=arguments,s.html(i?k("<div>").append(k.parseHTML(e)).find(i):e)}).always(n&&function(e,t){s.each(function(){n.apply(this,o||[e.responseText,t,e])})}),this},k.expr.pseudos.animated=function(t){return k.grep(k.timers,function(e){return t===e.elem}).length},k.offset={setOffset:function(e,t,n){var i,r,o,s,a,l,c=k.css(e,"position"),u=k(e),d={};"static"===c&&(e.style.position="relative"),a=u.offset(),o=k.css(e,"top"),l=k.css(e,"left"),r=("absolute"===c||"fixed"===c)&&-1<(o+l).indexOf("auto")?(s=(i=u.position()).top,i.left):(s=parseFloat(o)||0,parseFloat(l)||0),x(t)&&(t=t.call(e,n,k.extend({},a))),null!=t.top&&(d.top=t.top-a.top+s),null!=t.left&&(d.left=t.left-a.left+r),"using"in t?t.using.call(e,d):("number"==typeof d.top&&(d.top+="px"),"number"==typeof d.left&&(d.left+="px"),u.css(d))}},k.fn.extend({offset:function(t){if(arguments.length)return void 0===t?this:this.each(function(e){k.offset.setOffset(this,t,e)});var e,n,i=this[0];return i?i.getClientRects().length?(e=i.getBoundingClientRect(),n=i.ownerDocument.defaultView,{top:e.top+n.pageYOffset,left:e.left+n.pageXOffset}):{top:0,left:0}:void 0},position:function(){if(this[0]){var e,t,n,i=this[0],r={top:0,left:0};if("fixed"===k.css(i,"position"))t=i.getBoundingClientRect();else{for(t=this.offset(),n=i.ownerDocument,e=i.offsetParent||n.documentElement;e&&(e===n.body||e===n.documentElement)&&"static"===k.css(e,"position");)e=e.parentNode;e&&e!==i&&1===e.nodeType&&((r=k(e).offset()).top+=k.css(e,"borderTopWidth",!0),r.left+=k.css(e,"borderLeftWidth",!0))}return{top:t.top-r.top-k.css(i,"marginTop",!0),left:t.left-r.left-k.css(i,"marginLeft",!0)}}},offsetParent:function(){return this.map(function(){for(var e=this.offsetParent;e&&"static"===k.css(e,"position");)e=e.offsetParent;return e||ie})}}),k.each({scrollLeft:"pageXOffset",scrollTop:"pageYOffset"},function(t,r){var o="pageYOffset"===r;k.fn[t]=function(e){return z(this,function(e,t,n){var i;return g(e)?i=e:9===e.nodeType&&(i=e.defaultView),void 0===n?i?i[r]:e[t]:void(i?i.scrollTo(o?i.pageXOffset:n,o?n:i.pageYOffset):e[t]=n)},t,e,arguments.length)}}),k.each(["top","left"],function(e,n){k.cssHooks[n]=Ze(y.pixelPosition,function(e,t){if(t)return t=Je(e,n),Ue.test(t)?k(e).position()[n]+"px":t})}),k.each({Height:"height",Width:"width"},function(s,a){k.each({padding:"inner"+s,content:a,"":"outer"+s},function(i,o){k.fn[o]=function(e,t){var n=arguments.length&&(i||"boolean"!=typeof e),r=i||(!0===e||!0===t?"margin":"border");return z(this,function(e,t,n){var i;return g(e)?0===o.indexOf("outer")?e["inner"+s]:e.document.documentElement["client"+s]:9===e.nodeType?(i=e.documentElement,Math.max(e.body["scroll"+s],i["scroll"+s],e.body["offset"+s],i["offset"+s],i["client"+s])):void 0===n?k.css(e,t,r):k.style(e,t,n,r)},a,n?e:void 0,n)}})}),k.each(["ajaxStart","ajaxStop","ajaxComplete","ajaxError","ajaxSuccess","ajaxSend"],function(e,t){k.fn[t]=function(e){return this.on(t,e)}}),k.fn.extend({bind:function(e,t,n){return this.on(e,null,t,n)},unbind:function(e,t){return this.off(e,null,t)},delegate:function(e,t,n,i){return this.on(t,e,n,i)},undelegate:function(e,t,n){return 1===arguments.length?this.off(e,"**"):this.off(t,e||"**",n)},hover:function(e,t){return this.mouseenter(e).mouseleave(t||e)}}),k.each("blur focus focusin focusout resize scroll click dblclick mousedown mouseup mousemove mouseover mouseout mouseenter mouseleave change select submit keydown keypress keyup contextmenu".split(" "),function(e,n){k.fn[n]=function(e,t){return 0<arguments.length?this.on(n,null,e,t):this.trigger(n)}});var rn=/^[\s\uFEFF\xA0]+|[\s\uFEFF\xA0]+$/g;k.proxy=function(e,t){var n,i,r;if("string"==typeof t&&(n=e[t],t=e,e=n),x(e))return i=a.call(arguments,2),(r=function(){return e.apply(t||this,i.concat(a.call(arguments)))}).guid=e.guid=e.guid||k.guid++,r},k.holdReady=function(e){e?k.readyWait++:k.ready(!0)},k.isArray=Array.isArray,k.parseJSON=JSON.parse,k.nodeName=A,k.isFunction=x,k.isWindow=g,k.camelCase=U,k.type=w,k.now=Date.now,k.isNumeric=function(e){var t=k.type(e);return("number"===t||"string"===t)&&!isNaN(e-parseFloat(e))},k.trim=function(e){return null==e?"":(e+"").replace(rn,"")},"function"==typeof define&&define.amd&&define("jquery",[],function(){return k});var on=C.jQuery,sn=C.$;return k.noConflict=function(e){return C.$===k&&(C.$=sn),e&&C.jQuery===k&&(C.jQuery=on),k},void 0===e&&(C.jQuery=C.$=k),k}),function(X){var U={mode:"horizontal",slideSelector:"",infiniteLoop:!0,hideControlOnEnd:!1,speed:500,easing:null,slideMargin:0,startSlide:0,randomStart:!1,captions:!1,ticker:!1,tickerHover:!1,adaptiveHeight:!1,adaptiveHeightSpeed:500,video:!1,useCSS:!0,preloadImages:"visible",responsive:!0,slideZIndex:50,wrapperClass:"bx-wrapper",touchEnabled:!0,swipeThreshold:50,oneToOneTouch:!0,preventDefaultSwipeX:!0,preventDefaultSwipeY:!1,ariaLive:!0,ariaHidden:!0,keyboardEnabled:!1,pager:!0,pagerType:"full",pagerShortSeparator:" / ",pagerSelector:null,buildPager:null,pagerCustom:null,controls:!0,nextText:"Next",prevText:"Prev",nextSelector:null,prevSelector:null,autoControls:!1,startText:"Start",stopText:"Stop",autoControlsCombine:!1,autoControlsSelector:null,auto:!1,pause:4e3,autoStart:!0,autoDirection:"next",stopAutoOnClick:!1,autoHover:!1,autoDelay:0,autoSlideForOnePage:!1,minSlides:1,maxSlides:1,moveSlides:0,slideWidth:0,shrinkItems:!1,onSliderLoad:function(){return!0},onSlideBefore:function(){return!0},onSlideAfter:function(){return!0},onSlideNext:function(){return!0},onSlidePrev:function(){return!0},onSliderResize:function(){return!0},onAutoChange:function(){return!0}};X.fn.bxSlider=function(t){if(0===this.length)return this;if(1<this.length)return this.each(function(){X(this).bxSlider(t)}),this;var d={},p=this,r=X(window).width(),o=X(window).height();if(!X(p).data("bxSlider")){var n=function(){X(p).data("bxSlider")||(d.settings=X.extend({},U,t),d.settings.slideWidth=parseInt(d.settings.slideWidth),d.children=p.children(d.settings.slideSelector),d.children.length<d.settings.minSlides&&(d.settings.minSlides=d.children.length),d.children.length<d.settings.maxSlides&&(d.settings.maxSlides=d.children.length),d.settings.randomStart&&(d.settings.startSlide=Math.floor(Math.random()*d.children.length)),d.active={index:d.settings.startSlide},d.carousel=1<d.settings.minSlides||1<d.settings.maxSlides,d.carousel&&(d.settings.preloadImages="all"),d.minThreshold=d.settings.minSlides*d.settings.slideWidth+(d.settings.minSlides-1)*d.settings.slideMargin,d.maxThreshold=d.settings.maxSlides*d.settings.slideWidth+(d.settings.maxSlides-1)*d.settings.slideMargin,d.working=!1,d.controls={},d.interval=null,d.animProp="vertical"===d.settings.mode?"top":"left",d.usingCSS=d.settings.useCSS&&"fade"!==d.settings.mode&&function(){for(var e=document.createElement("div"),t=["WebkitPerspective","MozPerspective","OPerspective","msPerspective"],n=0;n<t.length;n++)if(void 0!==e.style[t[n]])return d.cssPrefix=t[n].replace("Perspective","").toLowerCase(),d.animProp="-"+d.cssPrefix+"-transform",!0;return!1}(),"vertical"===d.settings.mode&&(d.settings.maxSlides=d.settings.minSlides),p.data("origStyle",p.attr("style")),p.children(d.settings.slideSelector).each(function(){X(this).data("origStyle",X(this).attr("style"))}),e())},e=function(){var e=d.children.eq(d.settings.startSlide);p.wrap('<div class="'+d.settings.wrapperClass+'"><div class="bx-viewport"></div></div>'),d.viewport=p.parent(),d.settings.ariaLive&&!d.settings.ticker&&d.viewport.attr("aria-live","polite"),d.loader=X('<div class="bx-loading" />'),d.viewport.prepend(d.loader),p.css({width:"horizontal"===d.settings.mode?1e3*d.children.length+215+"%":"auto",position:"relative"}),d.usingCSS&&d.settings.easing?p.css("-"+d.cssPrefix+"-transition-timing-function",d.settings.easing):d.settings.easing||(d.settings.easing="swing"),d.viewport.css({width:"100%",overflow:"hidden",position:"relative"}),d.viewport.parent().css({maxWidth:l()}),d.children.css({float:"horizontal"===d.settings.mode?"left":"none",listStyle:"none",position:"relative"}),d.children.css("width",c()),"horizontal"===d.settings.mode&&0<d.settings.slideMargin&&d.children.css("marginRight",d.settings.slideMargin),"vertical"===d.settings.mode&&0<d.settings.slideMargin&&d.children.css("marginBottom",d.settings.slideMargin),"fade"===d.settings.mode&&(d.children.css({position:"absolute",zIndex:0,display:"none"}),d.children.eq(d.settings.startSlide).css({zIndex:d.settings.slideZIndex,display:"block"})),d.controls.el=X('<div class="bx-controls" />'),d.settings.captions&&S(),d.active.last=d.settings.startSlide===h()-1,d.settings.video&&p.fitVids(),"none"===d.settings.preloadImages?e=null:"all"!==d.settings.preloadImages&&!d.settings.ticker||(e=d.children),d.settings.ticker?d.settings.pager=!1:(d.settings.controls&&b(),d.settings.auto&&d.settings.autoControls&&w(),d.settings.pager&&x(),(d.settings.controls||d.settings.autoControls||d.settings.pager)&&d.viewport.after(d.controls.el)),null===e?a():s(e,a)},s=function(e,t){var n=e.find('img:not([src=""]), iframe').length,i=0;0!==n?e.find('img:not([src=""]), iframe').each(function(){X(this).one("load error",function(){++i===n&&t()}).each(function(){!this.complete&&""!=this.src||X(this).trigger("load")})}):t()},a=function(){var e,t,n;d.settings.infiniteLoop&&"fade"!==d.settings.mode&&!d.settings.ticker&&(e="vertical"===d.settings.mode?d.settings.minSlides:d.settings.maxSlides,t=d.children.slice(0,e).clone(!0).addClass("bx-clone"),n=d.children.slice(-e).clone(!0).addClass("bx-clone"),d.settings.ariaHidden&&(t.attr("aria-hidden",!0),n.attr("aria-hidden",!0)),p.append(t).prepend(n)),d.loader.remove(),v(),"vertical"===d.settings.mode&&(d.settings.adaptiveHeight=!0),d.viewport.height(f()),p.redrawSlider(),d.settings.onSliderLoad.call(p,d.active.index),d.initialized=!0,d.settings.responsive&&X(window).on("resize",F),d.settings.auto&&d.settings.autoStart&&(1<h()||d.settings.autoSlideForOnePage)&&M(),d.settings.ticker&&H(),d.settings.pager&&D(d.settings.startSlide),d.settings.controls&&q(),d.settings.touchEnabled&&!d.settings.ticker&&O(),d.settings.keyboardEnabled&&!d.settings.ticker&&X(document).keydown(I)},f=function(){var t=0,e=X();if("vertical"===d.settings.mode||d.settings.adaptiveHeight)if(d.carousel){var n=1===d.settings.moveSlides?d.active.index:d.active.index*g(),e=d.children.eq(n);for(i=1;i<=d.settings.maxSlides-1;i++)e=n+i>=d.children.length?e.add(d.children.eq(i-1)):e.add(d.children.eq(n+i))}else e=d.children.eq(d.active.index);else e=d.children;return"vertical"===d.settings.mode?(e.each(function(e){t+=X(this).outerHeight()}),0<d.settings.slideMargin&&(t+=d.settings.slideMargin*(d.settings.minSlides-1))):t=Math.max.apply(Math,e.map(function(){return X(this).outerHeight(!1)}).get()),"border-box"===d.viewport.css("box-sizing")?t+=parseFloat(d.viewport.css("padding-top"))+parseFloat(d.viewport.css("padding-bottom"))+parseFloat(d.viewport.css("border-top-width"))+parseFloat(d.viewport.css("border-bottom-width")):"padding-box"===d.viewport.css("box-sizing")&&(t+=parseFloat(d.viewport.css("padding-top"))+parseFloat(d.viewport.css("padding-bottom"))),t},l=function(){var e="100%";return 0<d.settings.slideWidth&&(e="horizontal"===d.settings.mode?d.settings.maxSlides*d.settings.slideWidth+(d.settings.maxSlides-1)*d.settings.slideMargin:d.settings.slideWidth),e},c=function(){var e=d.settings.slideWidth,t=d.viewport.width();if(0===d.settings.slideWidth||d.settings.slideWidth>t&&!d.carousel||"vertical"===d.settings.mode)e=t;else if(1<d.settings.maxSlides&&"horizontal"===d.settings.mode){if(t>d.maxThreshold)return e;t<d.minThreshold?e=(t-d.settings.slideMargin*(d.settings.minSlides-1))/d.settings.minSlides:d.settings.shrinkItems&&(e=Math.floor((t+d.settings.slideMargin)/Math.ceil((t+d.settings.slideMargin)/(e+d.settings.slideMargin))-d.settings.slideMargin))}return e},u=function(){var e,t=1;return"horizontal"===d.settings.mode&&0<d.settings.slideWidth?t=d.viewport.width()<d.minThreshold?d.settings.minSlides:d.viewport.width()>d.maxThreshold?d.settings.maxSlides:(e=d.children.first().width()+d.settings.slideMargin,Math.floor((d.viewport.width()+d.settings.slideMargin)/e)||1):"vertical"===d.settings.mode&&(t=d.settings.minSlides),t},h=function(){var e=0,t=0,n=0;if(0<d.settings.moveSlides){if(!d.settings.infiniteLoop){for(;t<d.children.length;)++e,t=n+u(),n+=d.settings.moveSlides<=u()?d.settings.moveSlides:u();return n}e=Math.ceil(d.children.length/g())}else e=Math.ceil(d.children.length/u());return e},g=function(){return 0<d.settings.moveSlides&&d.settings.moveSlides<=u()?d.settings.moveSlides:u()},v=function(){var e,t,n;d.children.length>d.settings.maxSlides&&d.active.last&&!d.settings.infiniteLoop?"horizontal"===d.settings.mode?(e=(t=d.children.last()).position(),m(-(e.left-(d.viewport.width()-t.outerWidth())),"reset",0)):"vertical"===d.settings.mode&&(n=d.children.length-d.settings.minSlides,e=d.children.eq(n).position(),m(-e.top,"reset",0)):(e=d.children.eq(d.active.index*g()).position(),d.active.index===h()-1&&(d.active.last=!0),void 0!==e&&("horizontal"===d.settings.mode?m(-e.left,"reset",0):"vertical"===d.settings.mode&&m(-e.top,"reset",0)))},m=function t(e,n,i,r){var o,s;d.usingCSS?(s="vertical"===d.settings.mode?"translate3d(0, "+e+"px, 0)":"translate3d("+e+"px, 0, 0)",p.css("-"+d.cssPrefix+"-transition-duration",i/1e3+"s"),"slide"===n?(p.css(d.animProp,s),0!==i?p.on("transitionend webkitTransitionEnd oTransitionEnd MSTransitionEnd",function(e){X(e.target).is(p)&&(p.off("transitionend webkitTransitionEnd oTransitionEnd MSTransitionEnd"),N())}):N()):"reset"===n?p.css(d.animProp,s):"ticker"===n&&(p.css("-"+d.cssPrefix+"-transition-timing-function","linear"),p.css(d.animProp,s),0!==i?p.on("transitionend webkitTransitionEnd oTransitionEnd MSTransitionEnd",function(e){X(e.target).is(p)&&(p.off("transitionend webkitTransitionEnd oTransitionEnd MSTransitionEnd"),t(r.resetValue,"reset",0),_())}):(t(r.resetValue,"reset",0),_()))):((o={})[d.animProp]=e,"slide"===n?p.animate(o,i,d.settings.easing,function(){N()}):"reset"===n?p.css(d.animProp,e):"ticker"===n&&p.animate(o,i,"linear",function(){t(r.resetValue,"reset",0),_()}))},y=function(){for(var e="",t="",n=h(),i=0;i<n;i++)t="",d.settings.buildPager&&X.isFunction(d.settings.buildPager)||d.settings.pagerCustom?(t=d.settings.buildPager(i),d.pagerEl.addClass("bx-custom-pager")):(t=i+1,d.pagerEl.addClass("bx-default-pager")),e+='<div class="bx-pager-item"><a href="" data-slide-index="'+i+'" class="bx-pager-link">'+t+"</a></div>";d.pagerEl.html(e)},x=function(){d.settings.pagerCustom?d.pagerEl=X(d.settings.pagerCustom):(d.pagerEl=X('<div class="bx-pager" />'),d.settings.pagerSelector?X(d.settings.pagerSelector).html(d.pagerEl):d.controls.el.addClass("bx-has-pager").append(d.pagerEl),y()),d.pagerEl.on("click touchend","a",A)},b=function(){d.controls.next=X('<a class="bx-next" href="">'+d.settings.nextText+"</a>"),d.controls.prev=X('<a class="bx-prev" href="">'+d.settings.prevText+"</a>"),d.controls.next.on("click touchend",C),d.controls.prev.on("click touchend",T),d.settings.nextSelector&&X(d.settings.nextSelector).append(d.controls.next),d.settings.prevSelector&&X(d.settings.prevSelector).append(d.controls.prev),d.settings.nextSelector||d.settings.prevSelector||(d.controls.directionEl=X('<div class="bx-controls-direction" />'),d.controls.directionEl.append(d.controls.prev).append(d.controls.next),d.controls.el.addClass("bx-has-controls-direction").append(d.controls.directionEl))},w=function(){d.controls.start=X('<div class="bx-controls-auto-item"><a class="bx-start" href="">'+d.settings.startText+"</a></div>"),d.controls.stop=X('<div class="bx-controls-auto-item"><a class="bx-stop" href="">'+d.settings.stopText+"</a></div>"),d.controls.autoEl=X('<div class="bx-controls-auto" />'),d.controls.autoEl.on("click",".bx-start",k),d.controls.autoEl.on("click",".bx-stop",E),d.settings.autoControlsCombine?d.controls.autoEl.append(d.controls.start):d.controls.autoEl.append(d.controls.start).append(d.controls.stop),d.settings.autoControlsSelector?X(d.settings.autoControlsSelector).html(d.controls.autoEl):d.controls.el.addClass("bx-has-controls-auto").append(d.controls.autoEl),L(d.settings.autoStart?"stop":"start")},S=function(){d.children.each(function(e){var t=X(this).find("img:first").attr("title");void 0!==t&&(""+t).length&&X(this).append('<div class="bx-caption"><span>'+t+"</span></div>")})},C=function(e){e.preventDefault(),d.controls.el.hasClass("disabled")||(d.settings.auto&&d.settings.stopAutoOnClick&&p.stopAuto(),p.goToNextSlide())},T=function(e){e.preventDefault(),d.controls.el.hasClass("disabled")||(d.settings.auto&&d.settings.stopAutoOnClick&&p.stopAuto(),p.goToPrevSlide())},k=function(e){p.startAuto(),e.preventDefault()},E=function(e){p.stopAuto(),e.preventDefault()},A=function(e){var t,n;e.preventDefault(),d.controls.el.hasClass("disabled")||(d.settings.auto&&d.settings.stopAutoOnClick&&p.stopAuto(),void 0!==(t=X(e.currentTarget)).attr("data-slide-index")&&(n=parseInt(t.attr("data-slide-index")))!==d.active.index&&p.goToSlide(n))},D=function(n){var e=d.children.length;if("short"===d.settings.pagerType)return 1<d.settings.maxSlides&&(e=Math.ceil(d.children.length/d.settings.maxSlides)),void d.pagerEl.html(n+1+d.settings.pagerShortSeparator+e);d.pagerEl.find("a").removeClass("active"),d.pagerEl.each(function(e,t){X(t).find("a").eq(n).addClass("active")})},N=function(){var e;d.settings.infiniteLoop&&(e="",0===d.active.index?e=d.children.eq(0).position():d.active.index===h()-1&&d.carousel?e=d.children.eq((h()-1)*g()).position():d.active.index===d.children.length-1&&(e=d.children.eq(d.children.length-1).position()),e&&("horizontal"===d.settings.mode?m(-e.left,"reset",0):"vertical"===d.settings.mode&&m(-e.top,"reset",0))),d.working=!1,d.settings.onSlideAfter.call(p,d.children.eq(d.active.index),d.oldIndex,d.active.index)},L=function(e){d.settings.autoControlsCombine?d.controls.autoEl.html(d.controls[e]):(d.controls.autoEl.find("a").removeClass("active"),d.controls.autoEl.find("a:not(.bx-"+e+")").addClass("active"))},q=function(){1===h()?(d.controls.prev.addClass("disabled"),d.controls.next.addClass("disabled")):!d.settings.infiniteLoop&&d.settings.hideControlOnEnd&&(0===d.active.index?(d.controls.prev.addClass("disabled"),d.controls.next.removeClass("disabled")):d.active.index===h()-1?(d.controls.next.addClass("disabled"),d.controls.prev.removeClass("disabled")):(d.controls.prev.removeClass("disabled"),d.controls.next.removeClass("disabled")))},j=function(){p.startAuto()},P=function(){p.stopAuto()},M=function(){0<d.settings.autoDelay?setTimeout(p.startAuto,d.settings.autoDelay):(p.startAuto(),X(window).focus(j).blur(P)),d.settings.autoHover&&p.hover(function(){d.interval&&(p.stopAuto(!0),d.autoPaused=!0)},function(){d.autoPaused&&(p.startAuto(!0),d.autoPaused=null)})},H=function(){var e,t,n,i,r,o,s,a,l=0;"next"===d.settings.autoDirection?p.append(d.children.clone().addClass("bx-clone")):(p.prepend(d.children.clone().addClass("bx-clone")),e=d.children.first().position(),l="horizontal"===d.settings.mode?-e.left:-e.top),m(l,"reset",0),d.settings.pager=!1,d.settings.controls=!1,d.settings.autoControls=!1,d.settings.tickerHover&&(d.usingCSS?(i="horizontal"===d.settings.mode?4:5,d.viewport.hover(function(){t=p.css("-"+d.cssPrefix+"-transform"),n=parseFloat(t.split(",")[i]),m(n,"reset",0)},function(){a=0,d.children.each(function(e){a+="horizontal"===d.settings.mode?X(this).outerWidth(!0):X(this).outerHeight(!0)}),r=d.settings.speed/a,o="horizontal"===d.settings.mode?"left":"top",s=r*(a-Math.abs(parseInt(n))),_(s)})):d.viewport.hover(function(){p.stop()},function(){a=0,d.children.each(function(e){a+="horizontal"===d.settings.mode?X(this).outerWidth(!0):X(this).outerHeight(!0)}),r=d.settings.speed/a,o="horizontal"===d.settings.mode?"left":"top",s=r*(a-Math.abs(parseInt(p.css(o)))),_(s)})),_()},_=function(e){var t,n,i=e||d.settings.speed,r={left:0,top:0},o={left:0,top:0};"next"===d.settings.autoDirection?r=p.find(".bx-clone").first().position():o=d.children.first().position(),t="horizontal"===d.settings.mode?-r.left:-r.top,n="horizontal"===d.settings.mode?-o.left:-o.top,m(t,"ticker",i,{resetValue:n})},I=function(e){var t,n,i,r,o=document.activeElement.tagName.toLowerCase();if(null==new RegExp(o,["i"]).exec("input|textarea")&&(t=p,n=X(window),i={top:n.scrollTop(),left:n.scrollLeft()},r=t.offset(),i.right=i.left+n.width(),i.bottom=i.top+n.height(),r.right=r.left+t.outerWidth(),r.bottom=r.top+t.outerHeight(),!(i.right<r.left||i.left>r.right||i.bottom<r.top||i.top>r.bottom))){if(39===e.keyCode)return C(e),!1;if(37===e.keyCode)return T(e),!1}},O=function(){d.touch={start:{x:0,y:0},end:{x:0,y:0}},d.viewport.on("touchstart MSPointerDown pointerdown",R),d.viewport.on("click",".bxslider a",function(e){d.viewport.hasClass("click-disabled")&&(e.preventDefault(),d.viewport.removeClass("click-disabled"))})},R=function(e){if("touchstart"===e.type||0===e.button)if(e.preventDefault(),d.controls.el.addClass("disabled"),d.working)d.controls.el.removeClass("disabled");else{d.touch.originalPos=p.position();var t=e.originalEvent,n=void 0!==t.changedTouches?t.changedTouches:[t];if("function"==typeof PointerEvent&&void 0===t.pointerId)return;d.touch.start.x=n[0].pageX,d.touch.start.y=n[0].pageY,d.viewport.get(0).setPointerCapture&&(d.pointerId=t.pointerId,d.viewport.get(0).setPointerCapture(d.pointerId)),d.originalClickTarget=t.originalTarget||t.target,d.originalClickButton=t.button,d.originalClickButtons=t.buttons,d.originalEventType=t.type,d.hasMove=!1,d.viewport.on("touchmove MSPointerMove pointermove",W),d.viewport.on("touchend MSPointerUp pointerup",z),d.viewport.on("MSPointerCancel pointercancel",$)}},$=function e(t){t.preventDefault(),m(d.touch.originalPos.left,"reset",0),d.controls.el.removeClass("disabled"),d.viewport.off("MSPointerCancel pointercancel",e),d.viewport.off("touchmove MSPointerMove pointermove",W),d.viewport.off("touchend MSPointerUp pointerup",z),d.viewport.get(0).releasePointerCapture&&d.viewport.get(0).releasePointerCapture(d.pointerId)},W=function(e){var t=e.originalEvent,n=void 0!==t.changedTouches?t.changedTouches:[t],i=Math.abs(n[0].pageX-d.touch.start.x),r=Math.abs(n[0].pageY-d.touch.start.y),o=0,s=0;d.hasMove=!0,(r<3*i&&d.settings.preventDefaultSwipeX||i<3*r&&d.settings.preventDefaultSwipeY)&&e.preventDefault(),"touchmove"!==e.type&&e.preventDefault(),"fade"!==d.settings.mode&&d.settings.oneToOneTouch&&(o="horizontal"===d.settings.mode?(s=n[0].pageX-d.touch.start.x,d.touch.originalPos.left+s):(s=n[0].pageY-d.touch.start.y,d.touch.originalPos.top+s),m(o,"reset",0))},z=function e(t){t.preventDefault(),d.viewport.off("touchmove MSPointerMove pointermove",W),d.controls.el.removeClass("disabled");var n=t.originalEvent,i=void 0!==n.changedTouches?n.changedTouches:[n],r=0,o=0;d.touch.end.x=i[0].pageX,d.touch.end.y=i[0].pageY,"fade"===d.settings.mode?(o=Math.abs(d.touch.start.x-d.touch.end.x))>=d.settings.swipeThreshold&&(d.touch.start.x>d.touch.end.x?p.goToNextSlide():p.goToPrevSlide(),p.stopAuto()):(r="horizontal"===d.settings.mode?(o=d.touch.end.x-d.touch.start.x,d.touch.originalPos.left):(o=d.touch.end.y-d.touch.start.y,d.touch.originalPos.top),(d.settings.infiniteLoop||!(0===d.active.index&&0<o||d.active.last&&o<0))&&Math.abs(o)>=d.settings.swipeThreshold?(o<0?p.goToNextSlide():p.goToPrevSlide(),p.stopAuto()):m(r,"reset",200)),d.viewport.off("touchend MSPointerUp pointerup",e),d.viewport.get(0).releasePointerCapture&&d.viewport.get(0).releasePointerCapture(d.pointerId),!1!==d.hasMove||0!==d.originalClickButton&&"touchstart"!==d.originalEventType||X(d.originalClickTarget).trigger({type:"click",button:d.originalClickButton,buttons:d.originalClickButtons})},F=function e(t){var n,i;d.initialized&&(d.working?window.setTimeout(e,10):(n=X(window).width(),i=X(window).height(),r===n&&o===i||(r=n,o=i,p.redrawSlider(),d.settings.onSliderResize.call(p,d.active.index))))},B=function(e){var t=u();d.settings.ariaHidden&&!d.settings.ticker&&(d.children.attr("aria-hidden","true"),d.children.slice(e,e+t).attr("aria-hidden","false"))};return p.goToSlide=function(e,t){var n,i,r,o,s,a=!0,l=0,c={left:0,top:0},u=null;if(d.oldIndex=d.active.index,d.active.index=(s=e)<0?d.settings.infiniteLoop?h()-1:d.active.index:s>=h()?d.settings.infiniteLoop?0:d.active.index:s,!d.working&&d.active.index!==d.oldIndex){if(d.working=!0,void 0!==(a=d.settings.onSlideBefore.call(p,d.children.eq(d.active.index),d.oldIndex,d.active.index))&&!a)return d.active.index=d.oldIndex,void(d.working=!1);"next"===t?d.settings.onSlideNext.call(p,d.children.eq(d.active.index),d.oldIndex,d.active.index)||(a=!1):"prev"===t&&(d.settings.onSlidePrev.call(p,d.children.eq(d.active.index),d.oldIndex,d.active.index)||(a=!1)),d.active.last=d.active.index>=h()-1,(d.settings.pager||d.settings.pagerCustom)&&D(d.active.index),d.settings.controls&&q(),"fade"===d.settings.mode?(d.settings.adaptiveHeight&&d.viewport.height()!==f()&&d.viewport.animate({height:f()},d.settings.adaptiveHeightSpeed),d.children.filter(":visible").fadeOut(d.settings.speed).css({zIndex:0}),d.children.eq(d.active.index).css("zIndex",d.settings.slideZIndex+1).fadeIn(d.settings.speed,function(){X(this).css("zIndex",d.settings.slideZIndex),N()})):(d.settings.adaptiveHeight&&d.viewport.height()!==f()&&d.viewport.animate({height:f()},d.settings.adaptiveHeightSpeed),!d.settings.infiniteLoop&&d.carousel&&d.active.last?"horizontal"===d.settings.mode?(c=(u=d.children.eq(d.children.length-1)).position(),l=d.viewport.width()-u.outerWidth()):(n=d.children.length-d.settings.minSlides,c=d.children.eq(n).position()):d.carousel&&d.active.last&&"prev"===t?(i=1===d.settings.moveSlides?d.settings.maxSlides-g():(h()-1)*g()-(d.children.length-d.settings.maxSlides),c=(u=p.children(".bx-clone").eq(i)).position()):"next"===t&&0===d.active.index?(c=p.find("> .bx-clone").eq(d.settings.maxSlides).position(),d.active.last=!1):0<=e&&(o=e*parseInt(g()),c=d.children.eq(o).position()),void 0!==c&&(r="horizontal"===d.settings.mode?-(c.left-l):-c.top,m(r,"slide",d.settings.speed)),d.working=!1),d.settings.ariaHidden&&B(d.active.index*g())}},p.goToNextSlide=function(){var e;!d.settings.infiniteLoop&&d.active.last||!0!==d.working&&(e=parseInt(d.active.index)+1,p.goToSlide(e,"next"))},p.goToPrevSlide=function(){var e;!d.settings.infiniteLoop&&0===d.active.index||!0===d.working||(e=parseInt(d.active.index)-1,p.goToSlide(e,"prev"))},p.startAuto=function(e){d.interval||(d.interval=setInterval(function(){"next"===d.settings.autoDirection?p.goToNextSlide():p.goToPrevSlide()},d.settings.pause),d.settings.onAutoChange.call(p,!0),d.settings.autoControls&&!0!==e&&L("stop"))},p.stopAuto=function(e){d.autoPaused&&(d.autoPaused=!1),d.interval&&(clearInterval(d.interval),d.interval=null,d.settings.onAutoChange.call(p,!1),d.settings.autoControls&&!0!==e&&L("start"))},p.getCurrentSlide=function(){return d.active.index},p.getCurrentSlideElement=function(){return d.children.eq(d.active.index)},p.getSlideElement=function(e){return d.children.eq(e)},p.getSlideCount=function(){return d.children.length},p.isWorking=function(){return d.working},p.redrawSlider=function(){d.children.add(p.find(".bx-clone")).outerWidth(c()),d.viewport.css("height",f()),d.settings.ticker||v(),d.active.last&&(d.active.index=h()-1),d.active.index>=h()&&(d.active.last=!0),d.settings.pager&&!d.settings.pagerCustom&&(y(),D(d.active.index)),d.settings.ariaHidden&&B(d.active.index*g())},p.destroySlider=function(){d.initialized&&(d.initialized=!1,X(".bx-clone",this).remove(),d.children.each(function(){void 0!==X(this).data("origStyle")?X(this).attr("style",X(this).data("origStyle")):X(this).removeAttr("style")}),void 0!==X(this).data("origStyle")?this.attr("style",X(this).data("origStyle")):X(this).removeAttr("style"),X(this).unwrap().unwrap(),d.controls.el&&d.controls.el.remove(),d.controls.next&&d.controls.next.remove(),d.controls.prev&&d.controls.prev.remove(),d.pagerEl&&d.settings.controls&&!d.settings.pagerCustom&&d.pagerEl.remove(),X(".bx-caption",this).remove(),d.controls.autoEl&&d.controls.autoEl.remove(),clearInterval(d.interval),d.settings.responsive&&X(window).off("resize",F),d.settings.keyboardEnabled&&X(document).off("keydown",I),X(this).removeData("bxSlider"),X(window).off("blur",P).off("focus",j))},p.reloadSlider=function(e){void 0!==e&&(t=e),p.destroySlider(),n(),X(p).data("bxSlider",this)},n(),X(p).data("bxSlider",this),this}}}(jQuery),new function(e,s){var t=document.querySelector(e),a=document.querySelector("[data-list]").children;t.addEventListener("click",function(e){e.preventDefault();var t=e.target.closest("[data-trigger]"),n=e.target.closest(".hamburger--open"),i=e.target.closest(".accordeon__item");if(n&&i.classList.remove(s),t){var r=t.parentNode;if(r.classList.contains(s))r.classList.remove(s);else{for(var o=0;o<a.length;o++)a[o].classList.remove(s);r.classList.add(s)}$(window).width(),i.closest(".accordeon__list")}})}("#acc-menu","accordeon__item-active"),document.querySelector(".team__list").addEventListener("click",function(e){e.preventDefault();var t,n,i,r=e.target.closest(".team__name-link"),o=e.currentTarget;r.classList.contains("team__name-link")&&((t=o.querySelector(".team__item.team-accordion--active"))&&(t.querySelector(".info").style.height="",t.classList.remove("team-accordion--active")),t&&t.querySelector(".team__name-link")==r||((n=r.closest(".team__item")).classList.add("team-accordion--active"),(i=n.querySelector(".info")).style.height=i.scrollHeight+"px"))}),function(){var i=document.querySelector(".form"),e=document.querySelector("#send"),r=document.querySelector(".modal"),o=document.querySelector(".modal__text");function s(e){return e.nextElementSibling.textContent=e.validationMessage,e.checkValidity()}e.addEventListener("click",function(e){{var t,n;e.preventDefault(),function(e){var t=!0;s(e.elements.name)||(t=!1);s(e.elements.phone)||(t=!1);s(e.elements.comment)||(t=!1);return t}(i)&&((t=new FormData).append("name",i.elements.name.value),t.append("phone",i.elements.phone.value),t.append("comment",i.elements.comment.value),t.append("to","adadaev2016@gmail.com"),(n=new XMLHttpRequest).responseType="json",n.open("POST","https://webdev-api.loftschool.com/sendmail"),n.send(t),n.addEventListener("load",function(){document.body.style.overflow="hidden",r.classList.remove("hide"),o.innerText=n.response.message}))}}),r.addEventListener("click",function(e){(e.target.closest(".modal__btn")||e.target.classList.contains("modal"))&&(document.body.style.overflow="",r.classList.add("hide"))})}(),ymaps.ready(function(){var e=new ymaps.Map("map",{center:[42.96255723,47.45059026],zoom:12,controls:[]}),t=new ymaps.GeoObjectCollection({},{draggable:!1,iconLayout:"default#image",iconImageHref:"./img/icons/marker.svg",iconImageSize:[46,57],iconImageOffset:[-3,-42]});[[42.96683028,47.54103068],[42.97288116,47.51236323],[42.97691475,47.4409521],[42.95018728,47.50309352]].forEach(function(e){t.add(new ymaps.Placemark(e))}),e.geoObjects.add(t),e.behaviors.disable("scrollZoom"),e.controls.add("zoomControl",{float:"none",position:{left:40,top:70}})}),function(){var t=document.querySelector(".menu"),n=(document.querySelector(".menu--open"),document.querySelector(".hamburger"));n.addEventListener("click",function(e){e.preventDefault(),t.classList.toggle("menu--open"),n.classList.toggle("hamburger--open"),t.classList.contains("menu--open")?document.body.style.overflow="hidden":document.body.style.overflow=""})}(),function(){var r=$("section"),o=$(".maincontent"),s=!1;r.first().addClass("active");function a(e){var t,n,i;!1===s&&(s=!0,t=-100*e,n=r.eq(e).attr("data-sidemenu-theme"),i=$(".fixed-menu"),"black"===n?i.addClass("fixed-menu--shadowed"):i.removeClass("fixed-menu--shadowed"),o.css({transform:"translateY(".concat(t,"%)")}),r.eq(e).addClass("active").siblings().removeClass("active"),setTimeout(function(){s=!1,i.find(".fixed-menu__item").eq(e).addClass("fixed-menu__item--active").siblings().removeClass("fixed-menu__item--active")},650))}function n(e){var t=r.filter(".active"),n=t.prev(),i=t.next();"next"===e&&i.length&&a(i.index()),"prev"===e&&n.length&&a(n.index())}$(window).on("wheel",function(e){var t=e.originalEvent.deltaY;0<t&&n("next"),t<0&&n("prev")}),$(window).on("keydown",function(e){var t=e.target.tagName.toLowerCase();if("input"!=t&&"textarea"!=t)switch(e.keyCode){case 38:n("prev");break;case 40:n("next")}}),$("[data-scroll-to]").click(function(e){e.preventDefault;var t=$(e.currentTarget).attr("data-scroll-to"),n=$("[data-section-id = ".concat(t,"]"));a(n.index())})}(),function(){var r=document.getElementById("video"),t=$(".player");$(".player__start").click(function(e){e.preventDefault();$(e.currentTarget);t.addClass("paused"),r.play(),$(".pause").css({display:"block"}),$(".player__start").css({display:"none"}),t.addClass("player--active")}),$(".pause").click(function(e){e.preventDefault(),t.removeClass("paused"),r.pause(),$(".pause").css({display:"none"}),$(".player__start").css({display:"block"}),t.removeClass("player--active")}),$(".player__playback").click(function(e){var t=$(e.currentTarget),n=e.originalEvent.layerX/t.width()*100,i=r.duration/100*n;$(".player__sircle").css({left:"".concat(n,"%")}),r.currentTime=i}),$(".player__splash--start").click(function(e){r.play(),t.addClass("player--active"),$(".pause").css({display:"block"}),$(".player__start").css({display:"none"})}),$(".player__volume--icon").click(function(e){0<r.volume?(r.volume=0,$(".volume--turn").css({display:"block"})):(r.volume=1,$(".volume--turn").css({display:"none"}))}),setInterval(function(){var e=r.currentTime;console.log(r.duration);var t=e/r.duration*100;$(".player__sircle").css({left:"".concat(t,"%")})},1e3)}(),function(){var t=$(".slider").bxSlider({pager:!1,controls:!1});$(".arrow__left").on("click",function(e){e.preventDefault(),t.goToPrevSlide()}),$(".arrow__right").on("click",function(e){e.preventDefault(),t.goToNextSlide()})}(),function(){var n=document.querySelectorAll(".reviews__display"),i=document.querySelectorAll(".reviews__switcher-item");for(var e=0;e<i.length;e++)!function(t){i[t].addEventListener("click",function(e){e.preventDefault(),function(e,t,n,i,r,o){for(var s=0;s<n.length;s++)n[s].classList.remove("interactive-avatar--active"),i[s].classList.remove("reviews__display-active");e.classList.add(r),i[t].classList.add(o)}(e.currentTarget,t,i,n,"interactive-avatar--active","reviews__display-active")})}(e)}();
//# sourceMappingURL=data:application/json;charset=utf8;base64,
